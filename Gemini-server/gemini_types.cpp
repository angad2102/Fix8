//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2019-03-27 15:16:08 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-19 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793600L
#error gemini_types.cpp version 1.4.0 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// gemini_types.cpp
//-------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <vector>
#include <map>
#include <list>
#include <set>
#include <iterator>
#include <algorithm>
#include <cerrno>
#include <string.h>
// f8 includes
#include <fix8/f8exception.hpp>
#include <fix8/hypersleep.hpp>
#include <fix8/mpmc.hpp>
#include <fix8/thread.hpp>
#include <fix8/f8types.hpp>
#include <fix8/f8utils.hpp>
#include <fix8/tickval.hpp>
#include <fix8/logger.hpp>
#include <fix8/traits.hpp>
#include <fix8/field.hpp>
#include <fix8/message.hpp>
#include "gemini_types.hpp"
//-------------------------------------------------------------------------------------------------
namespace FIX8 {
namespace GEMINI {

namespace {

//-------------------------------------------------------------------------------------------------
const char AdvSide_realm[]  
   { 'B', 'S', 'T', 'X' };
const char *AdvSide_descriptions[]  
   { "BUY", "SELL", "TRADE", "CROSS" };
const f8String AdvTransType_realm[]  
   { "C", "N", "R" };
const char *AdvTransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE" };
const char CommType_realm[]  
   { '1', '2', '3', '4', '5', '6' };
const char *CommType_descriptions[]  
   { "PER_UNIT", "PERCENTAGE", "ABSOLUTE", "PERCENTAGE_WAIVED_CASH_DISCOUNT", "PERCENTAGE_WAIVED_ENHANCED_UNITS", "POINTS_PER_BOND_OR_OR_CONTRACT" };
const f8String ExecInst_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "j" };
const char *ExecInst_descriptions[]  
   { "STAY_ON_OFFERSIDE", "NOT_HELD", "WORK", "GO_ALONG", "OVER_THE_DAY", "HELD", "PARTICIPATE_DONT_INITIATE", "STRICT_SCALE", "TRY_TO_SCALE", "STAY_ON_BIDSIDE", "NO_CROSS", "OK_TO_CROSS", "CALL_FIRST", "PERCENT_OF_VOLUME", "DO_NOT_INCREASE", "DO_NOT_REDUCE", "ALL_OR_NONE", "REINSTATE_ON_SYSTEM_FAILURE", "INSTITUTIONS_ONLY", "REINSTATE_ON_TRADING_HALT", "CANCEL_ON_TRADING_HALT", "LAST_PEG", "MID_PRICE", "NON_NEGOTIABLE", "OPENING_PEG", "MARKET_PEG", "CANCEL_ON_SYSTEM_FAILURE", "PRIMARY_PEG", "SUSPEND", "FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER", "CUSTOMER_DISPLAY_INSTRUCTION", "NETTING", "PEG_TO_VWAP", "TRADE_ALONG", "TRY_TO_STOP", "CANCEL_IF_NOT_BEST", "TRAILING_STOP_PEG", "STRICT_LIMIT", "IGNORE_PRICE_VALIDITY_CHECKS", "PEG_TO_LIMIT_PRICE", "WORK_TO_TARGET_STRATEGY", "SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE" };
const char HandlInst_realm[]  
   { '1', '2', '3' };
const char *HandlInst_descriptions[]  
   { "AUTOMATED_EXECUTION_ORDER_PRIVATE", "AUTOMATED_EXECUTION_ORDER_PUBLIC", "MANUAL_ORDER" };
const f8String SecurityIDSource_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J" };
const char *SecurityIDSource_descriptions[]  
   { "CUSIP", "SEDOL", "QUIK", "ISIN_NUMBER", "RIC_CODE", "ISO_CURRENCY_CODE", "ISO_COUNTRY_CODE", "EXCHANGE_SYMBOL", "CONSOLIDATED_TAPE_ASSOCIATION", "BLOOMBERG_SYMBOL", "WERTPAPIER", "DUTCH", "VALOREN", "SICOVAM", "BELGIAN", "COMMON", "CLEARING_HOUSE_CLEARING_ORGANIZATION", "ISDA_FPML_PRODUCT_SPECIFICATION", "OPTIONS_PRICE_REPORTING_AUTHORITY" };
const char IOIQltyInd_realm[]  
   { 'H', 'L', 'M' };
const char *IOIQltyInd_descriptions[]  
   { "HIGH", "LOW", "MEDIUM" };
const char IOITransType_realm[]  
   { 'C', 'N', 'R' };
const char *IOITransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE" };
const char LastCapacity_realm[]  
   { '1', '2', '3', '4' };
const char *LastCapacity_descriptions[]  
   { "AGENT", "CROSS_AS_AGENT", "CROSS_AS_PRINCIPAL", "PRINCIPAL" };
const f8String MsgType_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", "B", "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
const char *MsgType_descriptions[]  
   { "HEARTBEAT", "TEST_REQUEST", "RESEND_REQUEST", "REJECT", "SEQUENCE_RESET", "LOGOUT", "INDICATION_OF_INTEREST", "ADVERTISEMENT", "EXECUTION_REPORT", "ORDER_CANCEL_REJECT", "LOGON", "DERIVATIVE_SECURITY_LIST", "NEW_ORDER_MULTILEG", "MULTILEG_ORDER_CANCEL_REPLACE", "TRADE_CAPTURE_REPORT_REQUEST", "TRADE_CAPTURE_REPORT", "ORDER_MASS_STATUS_REQUEST", "QUOTE_REQUEST_REJECT", "RFQ_REQUEST", "QUOTE_STATUS_REPORT", "QUOTE_RESPONSE", "CONFIRMATION", "POSITION_MAINTENANCE_REQUEST", "POSITION_MAINTENANCE_REPORT", "REQUEST_FOR_POSITIONS", "REQUEST_FOR_POSITIONS_ACK", "POSITION_REPORT", "TRADE_CAPTURE_REPORT_REQUEST_ACK", "TRADE_CAPTURE_REPORT_ACK", "ALLOCATION_REPORT", "ALLOCATION_REPORT_ACK", "CONFIRMATION_ACK", "SETTLEMENT_INSTRUCTION_REQUEST", "ASSIGNMENT_REPORT", "COLLATERAL_REQUEST", "COLLATERAL_ASSIGNMENT", "COLLATERAL_RESPONSE", "NEWS", "COLLATERAL_REPORT", "COLLATERAL_INQUIRY", "NETWORK_STATUS_REQUEST", "NETWORK_STATUS_RESPONSE", "USER_REQUEST", "USER_RESPONSE", "COLLATERAL_INQUIRY_ACK", "CONFIRMATION_REQUEST", "EMAIL", "ORDER_SINGLE", "ORDER_LIST", "ORDER_CANCEL_REQUEST", "ORDER_CANCEL_REPLACE_REQUEST", "ORDER_STATUS_REQUEST", "ALLOCATION_INSTRUCTION", "LIST_CANCEL_REQUEST", "LIST_EXECUTE", "LIST_STATUS_REQUEST", "LIST_STATUS", "ALLOCATION_INSTRUCTION_ACK", "DONT_KNOW_TRADE", "QUOTE_REQUEST", "QUOTE", "SETTLEMENT_INSTRUCTIONS", "MARKET_DATA_REQUEST", "MARKET_DATA_SNAPSHOT_FULL_REFRESH", "MARKET_DATA_INCREMENTAL_REFRESH", "MARKET_DATA_REQUEST_REJECT", "QUOTE_CANCEL", "QUOTE_STATUS_REQUEST", "MASS_QUOTE_ACKNOWLEDGEMENT", "SECURITY_DEFINITION_REQUEST", "SECURITY_DEFINITION", "SECURITY_STATUS_REQUEST", "SECURITY_STATUS", "TRADING_SESSION_STATUS_REQUEST", "TRADING_SESSION_STATUS", "MASS_QUOTE", "BUSINESS_MESSAGE_REJECT", "BID_REQUEST", "BID_RESPONSE", "LIST_STRIKE_PRICE", "XML_MESSAGE", "REGISTRATION_INSTRUCTIONS", "REGISTRATION_INSTRUCTIONS_RESPONSE", "ORDER_MASS_CANCEL_REQUEST", "ORDER_MASS_CANCEL_REPORT", "NEW_ORDER_CROSS", "CROSS_ORDER_CANCEL_REPLACE_REQUEST", "CROSS_ORDER_CANCEL_REQUEST", "SECURITY_TYPE_REQUEST", "SECURITY_TYPES", "SECURITY_LIST_REQUEST", "SECURITY_LIST", "DERIVATIVE_SECURITY_LIST_REQUEST" };
const char OrdStatus_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E' };
const char *OrdStatus_descriptions[]  
   { "NEW", "PARTIALLY_FILLED", "FILLED", "DONE_FOR_DAY", "CANCELED", "REPLACED", "PENDING_CANCEL", "STOPPED", "REJECTED", "SUSPENDED", "PENDING_NEW", "CALCULATED", "EXPIRED", "ACCEPTED_FOR_BIDDING", "PENDING_REPLACE" };
const char OrdType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'P' };
const char *OrdType_descriptions[]  
   { "MARKET", "LIMIT", "STOP", "STOP_LIMIT", "MARKET_ON_CLOSE", "WITH_OR_WITHOUT", "LIMIT_OR_BETTER", "LIMIT_WITH_OR_WITHOUT", "ON_BASIS", "ON_CLOSE", "LIMIT_ON_CLOSE", "FOREX_MARKET", "PREVIOUSLY_QUOTED", "PREVIOUSLY_INDICATED", "FOREX_LIMIT", "FOREX_SWAP", "FOREX_PREVIOUSLY_QUOTED", "FUNARI", "MARKET_IF_TOUCHED", "MARKET_WITH_LEFTOVER_AS_LIMIT", "PREVIOUS_FUND_VALUATION_POINT", "NEXT_FUND_VALUATION_POINT", "PEGGED" };
const char Side_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G' };
const char *Side_descriptions[]  
   { "BUY", "SELL", "BUY_MINUS", "SELL_PLUS", "SELL_SHORT", "SELL_SHORT_EXEMPT", "UNDISCLOSED", "CROSS", "CROSS_SHORT", "CROSS_SHORT_EXEMPT", "AS_DEFINED", "OPPOSITE", "SUBSCRIBE", "REDEEM", "LEND", "BORROW" };
const char TimeInForce_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7' };
const char *TimeInForce_descriptions[]  
   { "DAY", "GOOD_TILL_CANCEL", "AT_THE_OPENING", "IMMEDIATE_OR_CANCEL", "FILL_OR_KILL", "GOOD_TILL_CROSSING", "GOOD_TILL_DATE", "AT_THE_CLOSE" };
const char Urgency_realm[]  
   { '0', '1', '2' };
const char *Urgency_descriptions[]  
   { "NORMAL", "FLASH", "BACKGROUND" };
const char SettlType_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
const char *SettlType_descriptions[]  
   { "REGULAR", "CASH", "NEXT_DAY", "T_PLUS_2", "T_PLUS_3", "T_PLUS_4", "FUTURE", "WHEN_AND_IF_ISSUED", "SELLERS_OPTION", "T_PLUS_5" };
const f8String SymbolSfx_realm[]  
   { "CD", "WI" };
const char *SymbolSfx_descriptions[]  
   { "A_EUCP_WITH_LUMP_SUM_INTEREST", "WHEN_ISSUED" };
const char AllocTransType_realm[]  
   { '0', '1', '2', '3', '4', '5' };
const char *AllocTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL", "PRELIMINARY", "CALCULATED", "CALCULATED_WITHOUT_PRELIMINARY" };
const char PositionEffect_realm[]  
   { 'C', 'F', 'O', 'R' };
const char *PositionEffect_descriptions[]  
   { "CLOSE", "FIFO", "OPEN", "ROLLED" };
const char ProcessCode_realm[]  
   { '0', '1', '2', '3', '4', '5', '6' };
const char *ProcessCode_descriptions[]  
   { "REGULAR", "SOFT_DOLLAR", "STEP_IN", "STEP_OUT", "SOFT_DOLLAR_STEP_IN", "SOFT_DOLLAR_STEP_OUT", "PLAN_SPONSOR" };
const int AllocStatus_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *AllocStatus_descriptions[]  
   { "ACCEPTED", "BLOCK_LEVEL_REJECT", "ACCOUNT_LEVEL_REJECT", "RECEIVED", "INCOMPLETE", "REJECTED_BY_INTERMEDIARY" };
const int AllocRejCode_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *AllocRejCode_descriptions[]  
   { "UNKNOWN_ACCOUNT", "INCORRECT_QUANTITY", "INCORRECT_AVERAGE_PRICE", "UNKNOWN_EXECUTING_BROKER_MNEMONIC", "COMMISSION_DIFFERENCE", "UNKNOWN_ORDERID", "UNKNOWN_LISTID", "OTHER", "INCORRECT_ALLOCATED_QUANTITY", "CALCULATION_DIFFERENCE", "UNKNOWN_OR_STALE_EXEC_ID", "MISMATCHED_DATA_VALUE", "UNKNOWN_CLORDID", "WAREHOUSE_REQUEST_REJECTED" };
const char EmailType_realm[]  
   { '0', '1', '2' };
const char *EmailType_descriptions[]  
   { "NEW", "REPLY", "ADMIN_REPLY" };
const int EncryptMethod_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *EncryptMethod_descriptions[]  
   { "NONE_OTHER", "PKCS", "DES", "PKCS_DES", "PGP_DES", "PGP_DES_MD5", "PEM_DES_MD5" };
const int CxlRejReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 99 };
const char *CxlRejReason_descriptions[]  
   { "TOO_LATE_TO_CANCEL", "UNKNOWN_ORDER", "BROKER_EXCHANGE_OPTION", "ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS", "UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST", "ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER", "DUPLICATE_CLORDID_RECEIVED", "OTHER" };
const int OrdRejReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 99 };
const char *OrdRejReason_descriptions[]  
   { "BROKER_EXCHANGE_OPTION", "UNKNOWN_SYMBOL", "EXCHANGE_CLOSED", "ORDER_EXCEEDS_LIMIT", "TOO_LATE_TO_ENTER", "UNKNOWN_ORDER", "DUPLICATE_ORDER", "DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER", "STALE_ORDER", "TRADE_ALONG_REQUIRED", "INVALID_INVESTOR_ID", "UNSUPPORTED_ORDER_CHARACTERISTIC", "SURVEILLENCE_OPTION", "INCORRECT_QUANTITY", "INCORRECT_ALLOCATED_QUANTITY", "UNKNOWN_ACCOUNT", "OTHER" };
const char IOIQualifier_realm[]  
   { 'A', 'B', 'C', 'D', 'I', 'L', 'M', 'O', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };
const char *IOIQualifier_descriptions[]  
   { "ALL_OR_NONE", "MARKET_ON_CLOSE", "AT_THE_CLOSE", "VWAP", "IN_TOUCH_WITH", "LIMIT", "MORE_BEHIND", "AT_THE_OPEN", "TAKING_A_POSITION", "AT_THE_MARKET", "READY_TO_TRADE", "PORTFOLIO_SHOWN", "THROUGH_THE_DAY", "VERSUS", "INDICATION_WORKING_AWAY", "CROSSING_OPPORTUNITY", "AT_THE_MIDPOINT", "PRE_OPEN" };
const char DKReason_realm[]  
   { 'A', 'B', 'C', 'D', 'E', 'F', 'Z' };
const char *DKReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "WRONG_SIDE", "QUANTITY_EXCEEDS_ORDER", "NO_MATCHING_ORDER", "PRICE_EXCEEDS_LIMIT", "CALCULATION_DIFFERENCE", "OTHER" };
const char MiscFeeType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
const char *MiscFeeType_descriptions[]  
   { "REGULATORY", "TAX", "LOCAL_COMMISSION", "EXCHANGE_FEES", "STAMP", "LEVY", "OTHER", "MARKUP", "CONSUMPTION_TAX" };
const char ExecType_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };
const char *ExecType_descriptions[]  
   { "NEW", "PARTIAL_FILL", "FILL", "DONE_FOR_DAY", "CANCELED", "REPLACE", "PENDING_CANCEL", "STOPPED", "REJECTED", "SUSPENDED", "PENDING_NEW", "CALCULATED", "EXPIRED", "RESTATED", "PENDING_REPLACE", "TRADE", "TRADE_CORRECT", "TRADE_CANCEL", "ORDER_STATUS" };
const char SettlCurrFxRateCalc_realm[]  
   { 'D', 'M' };
const char *SettlCurrFxRateCalc_descriptions[]  
   { "DIVIDE", "MULTIPLY" };
const char SettlInstMode_realm[]  
   { '0', '1', '4', '5' };
const char *SettlInstMode_descriptions[]  
   { "DEFAULT", "STANDING_INSTRUCTIONS_PROVIDED", "SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT", "REQUEST_REJECT" };
const char SettlInstTransType_realm[]  
   { 'C', 'N', 'R', 'T' };
const char *SettlInstTransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE", "RESTATE" };
const char SettlInstSource_realm[]  
   { '1', '2', '3' };
const char *SettlInstSource_descriptions[]  
   { "BROKERS_INSTRUCTIONS", "INSTITUTIONS_INSTRUCTIONS", "INVESTOR" };
const f8String SecurityType_realm[]  
   { "?", "ABS", "AMENDED", "AN", "BA", "BN", "BOX", "BRADY", "BRIDGE", "BUYSELL", "CB", "CD", "CL", "CMBS", "CMO", "COFO", "COFP", "CORP", "CP", "CPP", "CS", "DEFLTED", "DINP", "DN", "DUAL", "EUCD", "EUCORP", "EUCP", "EUSOV", "EUSUPRA", "FAC", "FADN", "FOR", "FORWARD", "FUT", "GO", "IET", "LOFC", "LQN", "MATURED", "MBS", "MF", "MIO", "MLEG", "MPO", "MPP", "MPT", "MT", "MTN", "NONE", "ONITE", "OPT", "PEF", "PFAND", "PN", "PS", "PZFJ", "RAN", "REPLACD", "REPO", "RETIRED", "REV", "RVLV", "RVLVTRM", "SECLOAN", "SECPLEDGE", "SPCLA", "SPCLO", "SPCLT", "STN", "STRUCT", "SUPRA", "SWING", "TAN", "TAXA", "TBA", "TBILL", "TBOND", "TCAL", "TD", "TECP", "TERM", "TINT", "TIPS", "TNOTE", "TPRN", "TRAN", "VRDN", "WAR", "WITHDRN", "XCN", "XLINKD", "YANK", "YCD" };
const char *SecurityType_descriptions[]  
   { "WILDCARD", "ASSET_BACKED_SECURITIES", "AMENDED_AND_RESTATED", "OTHER_ANTICIPATION_NOTES", "BANKERS_ACCEPTANCE", "BANK_NOTES", "BILL_OF_EXCHANGES", "BRADY_BOND", "BRIDGE_LOAN", "BUY_SELLBACK", "CONVERTIBLE_BOND", "CERTIFICATE_OF_DEPOSIT", "CALL_LOANS", "CORP_MORTGAGE_BACKED_SECURITIES", "COLLATERALIZED_MORTGAGE_OBLIGATION", "CERTIFICATE_OF_OBLIGATION", "CERTIFICATE_OF_PARTICIPATION", "CORPORATE_BOND", "COMMERCIAL_PAPER", "CORPORATE_PRIVATE_PLACEMENT", "COMMON_STOCK", "DEFAULTED", "DEBTOR_IN_POSSESSION", "DEPOSIT_NOTES", "DUAL_CURRENCY", "EURO_CERTIFICATE_OF_DEPOSIT", "EURO_CORPORATE_BOND", "EURO_COMMERCIAL_PAPER", "EURO_SOVEREIGNS", "EURO_SUPRANATIONAL_COUPONS", "FEDERAL_AGENCY_COUPON", "FEDERAL_AGENCY_DISCOUNT_NOTE", "FOREIGN_EXCHANGE_CONTRACT", "FORWARD", "FUTURE", "GENERAL_OBLIGATION_BONDS", "IOETTE_MORTGAGE", "LETTER_OF_CREDIT", "LIQUIDITY_NOTE", "MATURED", "MORTGAGE_BACKED_SECURITIES", "MUTUAL_FUND", "MORTGAGE_INTEREST_ONLY", "MULTI_LEG_INSTRUMENT", "MORTGAGE_PRINCIPAL_ONLY", "MORTGAGE_PRIVATE_PLACEMENT", "MISCELLANEOUS_PASS_THROUGH", "MANDATORY_TENDER", "MEDIUM_TERM_NOTES", "NO_SECURITY_TYPE", "OVERNIGHT", "OPTION", "PRIVATE_EXPORT_FUNDING", "PFANDBRIEFE", "PROMISSORY_NOTE", "PREFERRED_STOCK", "PLAZOS_FIJOS", "REVENUE_ANTICIPATION_NOTE", "REPLACED", "REPURCHASE", "RETIRED", "REVENUE_BONDS", "REVOLVER_LOAN", "REVOLVER_TERM_LOAN", "SECURITIES_LOAN", "SECURITIES_PLEDGE", "SPECIAL_ASSESSMENT", "SPECIAL_OBLIGATION", "SPECIAL_TAX", "SHORT_TERM_LOAN_NOTE", "STRUCTURED_NOTES", "USD_SUPRANATIONAL_COUPONS", "SWING_LINE_FACILITY", "TAX_ANTICIPATION_NOTE", "TAX_ALLOCATION", "TO_BE_ANNOUNCED", "US_TREASURY_BILL", "US_TREASURY_BOND", "PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE", "TIME_DEPOSIT", "TAX_EXEMPT_COMMERCIAL_PAPER", "TERM_LOAN", "INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE", "TREASURY_INFLATION_PROTECTED_SECURITIES", "US_TREASURY_NOTE", "PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE", "TAX_AND_REVENUE_ANTICIPATION_NOTE", "VARIABLE_RATE_DEMAND_NOTE", "WARRANT", "WITHDRAWN", "EXTENDED_COMM_NOTE", "INDEXED_LINKED", "YANKEE_CORPORATE_BOND", "YANKEE_CERTIFICATE_OF_DEPOSIT" };
const int StandInstDbType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *StandInstDbType_descriptions[]  
   { "OTHER", "DTC_SID", "THOMSON_ALERT", "A_GLOBAL_CUSTODIAN", "ACCOUNTNET" };
const int SettlDeliveryType_realm[]  
   { 0, 1, 2, 3 };
const char *SettlDeliveryType_descriptions[]  
   { "VERSUS_PAYMENT", "FREE", "TRI_PARTY", "HOLD_IN_CUSTODY" };
const int AllocLinkType_realm[]  
   { 0, 1 };
const char *AllocLinkType_descriptions[]  
   { "F_X_NETTING", "F_X_SWAP" };
const int PutOrCall_realm[]  
   { 0, 1 };
const char *PutOrCall_descriptions[]  
   { "PUT", "CALL" };
const int CoveredOrUncovered_realm[]  
   { 0, 1 };
const char *CoveredOrUncovered_descriptions[]  
   { "COVERED", "UNCOVERED" };
const int AllocHandlInst_realm[]  
   { 1, 2, 3 };
const char *AllocHandlInst_descriptions[]  
   { "MATCH", "FORWARD", "FORWARD_AND_MATCH" };
const int RoutingType_realm[]  
   { 1, 2, 3, 4 };
const char *RoutingType_descriptions[]  
   { "TARGET_FIRM", "TARGET_LIST", "BLOCK_FIRM", "BLOCK_LIST" };
const f8String BenchmarkCurveName_realm[]  
   { "EONIA", "EUREPO", "Euribor", "FutureSWAP", "LIBID", "LIBOR", "MuniAAA", "OTHER", "Pfandbriefe", "SONIA", "SWAP", "Treasury" };
const char *BenchmarkCurveName_descriptions[]  
   { "EONIA", "EUREPO", "EURIBOR", "FUTURESWAP", "LIBID", "LIBOR", "MUNIAAA", "OTHER", "PFANDBRIEFE", "SONIA", "SWAP", "TREASURY" };
const f8String StipulationType_realm[]  
   { "ABS", "AMT", "AUTOREINV", "BANKQUAL", "BGNCON", "COUPON", "CPP", "CPR", "CPY", "CURRENCY", "CUSTOMDATE", "GEOG", "HAIRCUT", "HEP", "INSURED", "ISSUE", "ISSUER", "ISSUESIZE", "LOOKBACK", "LOT", "LOTVAR", "MAT", "MATURITY", "MAXSUBS", "MHP", "MINDNOM", "MININCR", "MINQTY", "MPR", "PAYFREQ", "PIECES", "PMAX", "PPC", "PPL", "PPM", "PPT", "PRICE", "PRICEFREQ", "PROD", "PROTECT", "PSA", "PURPOSE", "PXSOURCE", "RATING", "RESTRICTED", "SECTOR", "SECTYPE", "SMM", "STRUCT", "SUBSFREQ", "SUBSLEFT", "TEXT", "TRDVAR", "WAC", "WAL", "WALA", "WAM", "WHOLE", "YIELD" };
const char *StipulationType_descriptions[]  
   { "ABSOLUTE_PREPAYMENT_SPEED", "AMT", "AUTO_REINVESTMENT_AT_OR_BETTER", "BANK_QUALIFIED", "BARGAIN_CONDITIONS", "COUPON_RANGE", "CONSTANT_PREPAYMENT_PENALTY", "CONSTANT_PREPAYMENT_RATE", "CONSTANT_PREPAYMENT_YIELD", "ISO_CURRENCY_CODE", "CUSTOM_START_END_DATE", "GEOGRAPHICS_AND_PERCENT_RANGE", "VALUATION_DISCOUNT", "FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE", "INSURED", "YEAR_OR_YEAR_MONTH_OF_ISSUE", "ISSUERS_TICKER", "ISSUE_SIZE_RANGE", "LOOKBACK_DAYS", "EXPLICIT_LOT_IDENTIFIER", "LOT_VARIANCE", "MATURITY_YEAR_AND_MONTH", "MATURITY_RANGE", "MAXIMUM_SUBSTITUTIONS", "PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE", "MINIMUM_DENOMINATION", "MINIMUM_INCREMENT", "MINIMUM_QUANTITY", "MONTHLY_PREPAYMENT_RATE", "PAYMENT_FREQUENCY_CALENDAR", "NUMBER_OF_PIECES", "POOLS_MAXIMUM", "PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE", "POOLS_PER_LOT", "POOLS_PER_MILLION", "POOLS_PER_TRADE", "PRICE_RANGE", "PRICING_FREQUENCY", "PRODUCTION_YEAR", "CALL_PROTECTION", "PERCENT_OF_BMA_PREPAYMENT_CURVE", "PURPOSE", "BENCHMARK_PRICE_SOURCE", "RATING_SOURCE_AND_RANGE", "RESTRICTED", "MARKET_SECTOR", "SECURITYTYPE_INCLUDED_OR_EXCLUDED", "SINGLE_MONTHLY_MORTALITY", "STRUCTURE", "SUBSTITUTIONS_FREQUENCY", "SUBSTITUTIONS_LEFT", "FREEFORM_TEXT", "TRADE_VARIANCE", "WEIGHTED_AVERAGE_COUPON", "WEIGHTED_AVERAGE_LIFE_COUPON", "WEIGHTED_AVERAGE_LOAN_AGE", "WEIGHTED_AVERAGE_MATURITY", "WHOLE_POOL", "YIELD_RANGE" };
const f8String StipulationValue_realm[]  
   { "CB", "CC", "CD", "CP", "CR", "CS", "GD", "SP", "TR", "XB", "XC", "XD", "XP", "XR" };
const char *StipulationValue_descriptions[]  
   { "SPECIAL_CUM_BONUS", "SPECIAL_CUM_COUPON", "SPECIAL_CUM_DIVIDEND", "SPECIAL_CUM_CAPITAL_REPAYMENTS", "SPECIAL_CUM_RIGHTS", "CASH_SETTLEMENT", "GUARANTEED_DELIVERY", "SPECIAL_PRICE", "REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES", "SPECIAL_EX_BONUS", "SPECIAL_EX_COUPON", "SPECIAL_EX_DIVIDEND", "SPECIAL_EX_CAPITAL_REPAYMENTS", "SPECIAL_EX_RIGHTS" };
const f8String YieldType_realm[]  
   { "AFTERTAX", "ANNUAL", "ATISSUE", "AVGMATURITY", "BOOK", "CALL", "CHANGE", "CLOSE", "COMPOUND", "CURRENT", "GOVTEQUIV", "GROSS", "INFLATION", "INVERSEFLOATER", "LASTCLOSE", "LASTMONTH", "LASTQUARTER", "LASTYEAR", "LONGAVGLIFE", "MARK", "MATURITY", "NEXTREFUND", "OPENAVG", "PREVCLOSE", "PROCEEDS", "PUT", "SEMIANNUAL", "SHORTAVGLIFE", "SIMPLE", "TAXEQUIV", "TENDER", "TRUE", "VALUE1_32", "WORST" };
const char *YieldType_descriptions[]  
   { "AFTER_TAX_YIELD", "ANNUAL_YIELD", "YIELD_AT_ISSUE", "YIELD_TO_AVERAGE_MATURITY", "BOOK_YIELD", "YIELD_TO_NEXT_CALL", "YIELD_CHANGE_SINCE_CLOSE", "CLOSING_YIELD", "COMPOUND_YIELD", "CURRENT_YIELD", "GOVERNMENT_EQUIVALENT_YIELD", "TRUE_GROSS_YIELD", "YIELD_WITH_INFLATION_ASSUMPTION", "INVERSE_FLOATER_BOND_YIELD", "MOST_RECENT_CLOSING_YIELD", "CLOSING_YIELD_MOST_RECENT_MONTH", "CLOSING_YIELD_MOST_RECENT_QUARTER", "CLOSING_YIELD_MOST_RECENT_YEAR", "YIELD_TO_LONGEST_AVERAGE_LIFE", "MARK_TO_MARKET_YIELD", "YIELD_TO_MATURITY", "YIELD_TO_NEXT_REFUND", "OPEN_AVERAGE_YIELD", "PREVIOUS_CLOSE_YIELD", "PROCEEDS_YIELD", "YIELD_TO_NEXT_PUT", "SEMI_ANNUAL_YIELD", "YIELD_TO_SHORTEST_AVERAGE_LIFE", "SIMPLE_YIELD", "TAX_EQUIVALENT_YIELD", "YIELD_TO_TENDER_DATE", "TRUE_YIELD", "YIELD_VALUE_OF_1_32", "YIELD_TO_WORST" };
const char SubscriptionRequestType_realm[]  
   { '0', '1', '2' };
const char *SubscriptionRequestType_descriptions[]  
   { "SNAPSHOT", "SNAPSHOT_PLUS_UPDATES", "DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST" };
const int MarketDepth_realm[]  
   { 0, 1 };
const char *MarketDepth_descriptions[]  
   { "FULL_BOOK", "TOP_OF_BOOK" };
const int MDUpdateType_realm[]  
   { 0, 1 };
const char *MDUpdateType_descriptions[]  
   { "FULL_REFRESH", "INCREMENTAL_REFRESH" };
const char MDEntryType_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'Q' };
const char *MDEntryType_descriptions[]  
   { "BID", "OFFER", "TRADE", "INDEX_VALUE", "OPENING_PRICE", "CLOSING_PRICE", "SETTLEMENT_PRICE", "TRADING_SESSION_HIGH_PRICE", "TRADING_SESSION_LOW_PRICE", "TRADING_SESSION_VWAP_PRICE", "IMBALANCE", "TRADE_VOLUME", "OPEN_INTEREST", "AUCTION_CLEARING_PRICE" };
const char TickDirection_realm[]  
   { '0', '1', '2', '3' };
const char *TickDirection_descriptions[]  
   { "PLUS_TICK", "ZERO_PLUS_TICK", "MINUS_TICK", "ZERO_MINUS_TICK" };
const f8String QuoteCondition_realm[]  
   { "A", "B", "C", "D", "E", "F", "G", "H", "I" };
const char *QuoteCondition_descriptions[]  
   { "OPEN_ACTIVE", "CLOSED_INACTIVE", "EXCHANGE_BEST", "CONSOLIDATED_BEST", "LOCKED", "CROSSED", "DEPTH", "FAST_TRADING", "NON_FIRM" };
const f8String TradeCondition_realm[]  
   { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "P", "Q", "R" };
const char *TradeCondition_descriptions[]  
   { "CASH_MARKET", "AVERAGE_PRICE_TRADE", "CASH_TRADE", "NEXT_DAY_MARKET", "OPENING_REOPENING_TRADE_DETAIL", "INTRADAY_TRADE_DETAIL", "RULE127", "RULE155", "SOLD_LAST", "NEXT_DAY_TRADE", "OPENED", "SELLER", "SOLD", "STOPPED_STOCK", "IMBALANCE_MORE_BUYERS", "IMBALANCE_MORE_SELLERS", "OPENING_PRICE" };
const char MDUpdateAction_realm[]  
   { '0', '1', '2' };
const char *MDUpdateAction_descriptions[]  
   { "NEW", "CHANGE", "DELETE" };
const char MDReqRejReason_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
const char *MDReqRejReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "DUPLICATE_MDREQID", "INSUFFICIENT_BANDWIDTH", "INSUFFICIENT_PERMISSIONS", "UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE", "UNSUPPORTED_MARKETDEPTH", "UNSUPPORTED_MDUPDATETYPE", "UNSUPPORTED_AGGREGATEDBOOK", "UNSUPPORTED_MDENTRYTYPE", "UNSUPPORTED_TRADINGSESSIONID", "UNSUPPORTED_SCOPE", "UNSUPPORTED_OPENCLOSESETTLEFLAG", "UNSUPPORTED_MDIMPLICITDELETE" };
const char DeleteReason_realm[]  
   { '0', '1' };
const char *DeleteReason_descriptions[]  
   { "CANCELATION_TRADE_BUST", "ERROR" };
const f8String OpenCloseSettlFlag_realm[]  
   { "0", "1", "2", "3", "4", "5" };
const char *OpenCloseSettlFlag_descriptions[]  
   { "DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY", "SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY", "DELIVERY_SETTLEMENT_ENTRY", "EXPECTED_ENTRY", "ENTRY_FROM_PREVIOUS_BUSINESS_DAY", "THEORETICAL_PRICE_VALUE" };
const f8String FinancialStatus_realm[]  
   { "1", "2" };
const char *FinancialStatus_descriptions[]  
   { "BANKRUPT", "PENDING_DELISTING" };
const f8String CorporateAction_realm[]  
   { "A", "B", "C", "D", "E" };
const char *CorporateAction_descriptions[]  
   { "EX_DIVIDEND", "EX_DISTRIBUTION", "EX_RIGHTS", "NEW", "EX_INTEREST" };
const int QuoteStatus_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *QuoteStatus_descriptions[]  
   { "ACCEPTED", "CANCELED_FOR_SYMBOL", "CANCELED_FOR_SECURITY_TYPE", "CANCELED_FOR_UNDERLYING", "CANCELED_ALL", "REJECTED", "REMOVED_FROM_MARKET", "EXPIRED", "QUERY", "QUOTE_NOT_FOUND", "PENDING", "PASS", "LOCKED_MARKET_WARNING", "CROSS_MARKET_WARNING", "CANCELED_DUE_TO_LOCK_MARKET", "CANCELED_DUE_TO_CROSS_MARKET" };
const int QuoteCancelType_realm[]  
   { 1, 2, 3, 4 };
const char *QuoteCancelType_descriptions[]  
   { "CANCEL_FOR_SYMBOL", "CANCEL_FOR_SECURITY_TYPE", "CANCEL_FOR_UNDERLYING_SYMBOL", "CANCEL_ALL_QUOTES" };
const int QuoteRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 99 };
const char *QuoteRejectReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "EXCHANGE_CLOSED", "QUOTE_REQUEST_EXCEEDS_LIMIT", "TOO_LATE_TO_ENTER", "UNKNOWN_QUOTE", "DUPLICATE_QUOTE", "INVALID_BID_ASK_SPREAD", "INVALID_PRICE", "NOT_AUTHORIZED_TO_QUOTE_SECURITY", "OTHER" };
const int QuoteResponseLevel_realm[]  
   { 0, 1, 2 };
const char *QuoteResponseLevel_descriptions[]  
   { "NO_ACKNOWLEDGEMENT", "ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES", "ACKNOWLEDGE_EACH_QUOTE_MESSAGES" };
const int QuoteRequestType_realm[]  
   { 1, 2 };
const char *QuoteRequestType_descriptions[]  
   { "MANUAL", "AUTOMATIC" };
const int UnderlyingPutOrCall_realm[]  
   { 0, 1 };
const char *UnderlyingPutOrCall_descriptions[]  
   { "PUT", "CALL" };
const int SecurityRequestType_realm[]  
   { 0, 1, 2, 3 };
const char *SecurityRequestType_descriptions[]  
   { "REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS", "REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED", "REQUEST_LIST_SECURITY_TYPES", "REQUEST_LIST_SECURITIES" };
const int SecurityResponseType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *SecurityResponseType_descriptions[]  
   { "ACCEPT_SECURITY_PROPOSAL_AS_IS", "ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE", "LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST", "LIST_OF_SECURITIES_RETURNED_PER_REQUEST", "REJECT_SECURITY_PROPOSAL", "CAN_NOT_MATCH_SELECTION_CRITERIA" };
const int SecurityTradingStatus_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };
const char *SecurityTradingStatus_descriptions[]  
   { "OPENING_DELAY", "TRADING_HALT", "RESUME", "NO_OPEN_NO_RESUME", "PRICE_INDICATION", "TRADING_RANGE_INDICATION", "MARKET_IMBALANCE_BUY", "MARKET_IMBALANCE_SELL", "MARKET_ON_CLOSE_IMBALANCE_BUY", "MARKET_ON_CLOSE_IMBALANCE_SELL", "NOT_ASSIGNED", "NO_MARKET_IMBALANCE", "NO_MARKET_ON_CLOSE_IMBALANCE", "ITS_PRE_OPENING", "NEW_PRICE_INDICATION", "TRADE_DISSEMINATION_TIME", "READY_TO_TRADE_START_OF_SESSION", "NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION", "NOT_TRADED_ON_THIS_MARKET", "UNKNOWN_OR_INVALID", "PRE_OPEN", "OPENING_ROTATION", "FAST_MARKET" };
const char HaltReason_realm[]  
   { 'D', 'E', 'I', 'M', 'P', 'X' };
const char *HaltReason_descriptions[]  
   { "NEWS_DISSEMINATION", "ORDER_INFLUX", "ORDER_IMBALANCE", "ADDITIONAL_INFORMATION", "NEWS_PENDING", "EQUIPMENT_CHANGEOVER" };
const int Adjustment_realm[]  
   { 1, 2, 3 };
const char *Adjustment_descriptions[]  
   { "CANCEL", "ERROR", "CORRECTION" };
const int TradSesMethod_realm[]  
   { 1, 2, 3 };
const char *TradSesMethod_descriptions[]  
   { "ELECTRONIC", "OPEN_OUTCRY", "TWO_PARTY" };
const int TradSesMode_realm[]  
   { 1, 2, 3 };
const char *TradSesMode_descriptions[]  
   { "TESTING", "SIMULATED", "PRODUCTION" };
const int TradSesStatus_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *TradSesStatus_descriptions[]  
   { "UNKNOWN", "HALTED", "OPEN", "CLOSED", "PRE_OPEN", "PRE_CLOSE", "REQUEST_REJECTED" };
const f8String MessageEncoding_realm[]  
   { "EUC-JP", "ISO-2022-JP", "SHIFT_JIS", "UTF-8" };
const char *MessageEncoding_descriptions[]  
   { "EUC_JP", "ISO_2022_JP", "SHIFT_JIS", "UTF_8" };
const int QuoteEntryRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
const char *QuoteEntryRejectReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "EXCHANGE_CLOSED", "QUOTE_EXCEEDS_LIMIT", "TOO_LATE_TO_ENTER", "UNKNOWN_QUOTE", "DUPLICATE_QUOTE", "INVALID_BID_ASK_SPREAD", "INVALID_PRICE", "NOT_AUTHORIZED_TO_QUOTE_SECURITY" };
const int SessionRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 99 };
const char *SessionRejectReason_descriptions[]  
   { "INVALID_TAG_NUMBER", "REQUIRED_TAG_MISSING", "TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE", "UNDEFINED_TAG", "TAG_SPECIFIED_WITHOUT_A_VALUE", "VALUE_IS_INCORRECT", "INCORRECT_DATA_FORMAT_FOR_VALUE", "DECRYPTION_PROBLEM", "SIGNATURE_PROBLEM", "COMPID_PROBLEM", "SENDINGTIME_ACCURACY_PROBLEM", "INVALID_MSGTYPE", "XML_VALIDATION_ERROR", "TAG_APPEARS_MORE_THAN_ONCE", "TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER", "REPEATING_GROUP_FIELDS_OUT_OF_ORDER", "INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP", "NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER", "OTHER" };
const char BidRequestTransType_realm[]  
   { 'C', 'N' };
const char *BidRequestTransType_descriptions[]  
   { "CANCEL", "NEW" };
const int ExecRestatementReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 };
const char *ExecRestatementReason_descriptions[]  
   { "GT_CORPORATE_ACTION", "GT_RENEWAL_RESTATEMENT", "VERBAL_CHANGE", "REPRICING_OF_ORDER", "BROKER_OPTION", "PARTIAL_DECLINE_OF_ORDERQTY", "CANCEL_ON_TRADING_HALT", "CANCEL_ON_SYSTEM_FAILURE", "MARKET_OPTION", "CANCELED_NOT_BEST", "WAREHOUSE_RECAP", "OTHER" };
const int BusinessRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *BusinessRejectReason_descriptions[]  
   { "OTHER", "UNKOWN_ID", "UNKNOWN_SECURITY", "UNSUPPORTED_MESSAGE_TYPE", "APPLICATION_NOT_AVAILABLE", "CONDITIONALLY_REQUIRED_FIELD_MISSING", "NOT_AUTHORIZED", "DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME" };
const char MsgDirection_realm[]  
   { 'R', 'S' };
const char *MsgDirection_descriptions[]  
   { "RECEIVE", "SEND" };
const char DiscretionInst_realm[]  
   { '0', '1', '2', '3', '4', '5', '6' };
const char *DiscretionInst_descriptions[]  
   { "RELATED_TO_DISPLAYED_PRICE", "RELATED_TO_MARKET_PRICE", "RELATED_TO_PRIMARY_PRICE", "RELATED_TO_LOCAL_PRIMARY_PRICE", "RELATED_TO_MIDPOINT_PRICE", "RELATED_TO_LAST_TRADE_PRICE", "RELATED_TO_VWAP" };
const int BidType_realm[]  
   { 1, 2, 3 };
const char *BidType_descriptions[]  
   { "NON_DISCLOSED", "DISCLOSED_STYLE", "NO_BIDDING_PROCESS" };
const int BidDescriptorType_realm[]  
   { 1, 2, 3 };
const char *BidDescriptorType_descriptions[]  
   { "SECTOR", "COUNTRY", "INDEX" };
const int SideValueInd_realm[]  
   { 1, 2 };
const char *SideValueInd_descriptions[]  
   { "SIDEVALUE1", "SIDEVALUE2" };
const int LiquidityIndType_realm[]  
   { 1, 2, 3, 4 };
const char *LiquidityIndType_descriptions[]  
   { "FIVEDAY_MOVING_AVERAGE", "TWENTYDAY_MOVING_AVERAGE", "NORMAL_MARKET_SIZE", "OTHER" };
const int ProgRptReqs_realm[]  
   { 1, 2, 3 };
const char *ProgRptReqs_descriptions[]  
   { "BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST", "SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS", "REAL_TIME_EXECUTION_REPORTS" };
const int IncTaxInd_realm[]  
   { 1, 2 };
const char *IncTaxInd_descriptions[]  
   { "NET", "GROSS" };
const char BidTradeType_realm[]  
   { 'A', 'G', 'J', 'R' };
const char *BidTradeType_descriptions[]  
   { "AGENCY", "VWAP_GUARANTEE", "GUARANTEED_CLOSE", "RISK_TRADE" };
const char BasisPxType_realm[]  
   { '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'Z' };
const char *BasisPxType_descriptions[]  
   { "CLOSING_PRICE_AT_MORNING_SESSION", "CLOSING_PRICE", "CURRENT_PRICE", "SQ", "VWAP_THROUGH_A_DAY", "VWAP_THROUGH_A_MORNING_SESSION", "VWAP_THROUGH_AN_AFTERNOON_SESSION", "VWAP_THROUGH_A_DAY_EXCEPT_YORI", "VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI", "VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI", "STRIKE", "OPEN", "OTHERS" };
const int PriceType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
const char *PriceType_descriptions[]  
   { "PERCENTAGE", "PER_UNIT", "FIXED_AMOUNT", "DISCOUNT", "PREMIUM", "SPREAD", "TED_PRICE", "TED_YIELD", "YIELD", "FIXED_CABINET_TRADE_PRICE", "VARIABLE_CABINET_TRADE_PRICE" };
const int GTBookingInst_realm[]  
   { 0, 1, 2 };
const char *GTBookingInst_descriptions[]  
   { "BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION", "ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES", "ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE" };
const int ListStatusType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *ListStatusType_descriptions[]  
   { "ACK", "RESPONSE", "TIMED", "EXECSTARTED", "ALLDONE", "ALERT" };
const int NetGrossInd_realm[]  
   { 1, 2 };
const char *NetGrossInd_descriptions[]  
   { "NET", "GROSS" };
const int ListOrderStatus_realm[]  
   { 1, 2, 3, 4, 5, 6, 7 };
const char *ListOrderStatus_descriptions[]  
   { "INBIDDINGPROCESS", "RECEIVEDFOREXECUTION", "EXECUTING", "CANCELING", "ALERT", "ALL_DONE", "REJECT" };
const char ListExecInstType_realm[]  
   { '1', '2', '3', '4', '5' };
const char *ListExecInstType_descriptions[]  
   { "IMMEDIATE", "WAIT_FOR_EXECUTE_INSTRUCTION", "EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN", "EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP", "EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW" };
const char CxlRejResponseTo_realm[]  
   { '1', '2' };
const char *CxlRejResponseTo_descriptions[]  
   { "ORDER_CANCEL_REQUEST", "ORDER_CANCEL_REPLACE_REQUEST" };
const char MultiLegReportingType_realm[]  
   { '1', '2', '3' };
const char *MultiLegReportingType_descriptions[]  
   { "SINGLE_SECURITY", "INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY", "MULTI_LEG_SECURITY" };
const char PartyIDSource_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };
const char *PartyIDSource_descriptions[]  
   { "KOREAN_INVESTOR_ID", "TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID", "TAIWANESE_TRADING_ACCOUNT", "MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER", "CHINESE_B_SHARE", "UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER", "US_SOCIAL_SECURITY_NUMBER", "US_EMPLOYER_IDENTIFICATION_NUMBER", "AUSTRALIAN_BUSINESS_NUMBER", "AUSTRALIAN_TAX_FILE_NUMBER", "BIC", "GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER", "PROPRIETARY_CUSTOM_CODE", "ISO_COUNTRY_CODE", "SETTLEMENT_ENTITY_LOCATION", "MIC", "CSD_PARTICIPANT_MEMBER_CODE", "DIRECTED_BROKER" };
const int PartyRole_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38 };
const char *PartyRole_descriptions[]  
   { "EXECUTING_FIRM", "BROKER_OF_CREDIT", "CLIENT_ID", "CLEARING_FIRM", "INVESTOR_ID", "INTRODUCING_FIRM", "ENTERING_FIRM", "LOCATE_LENDING_FIRM", "FUND_MANAGER_CLIENT_ID", "SETTLEMENT_LOCATION", "ORDER_ORIGINATION_TRADER", "EXECUTING_TRADER", "ORDER_ORIGINATION_FIRM", "GIVEUP_CLEARING_FIRM", "CORRESPONDANT_CLEARING_FIRM", "EXECUTING_SYSTEM", "CONTRA_FIRM", "CONTRA_CLEARING_FIRM", "SPONSORING_FIRM", "UNDERLYING_CONTRA_FIRM", "CLEARING_ORGANIZATION", "EXCHANGE", "CUSTOMER_ACCOUNT", "CORRESPONDENT_CLEARING_ORGANIZATION", "CORRESPONDENT_BROKER", "BUYER_SELLER", "CUSTODIAN", "INTERMEDIARY", "AGENT", "SUB_CUSTODIAN", "BENEFICIARY", "INTERESTED_PARTY", "REGULATORY_BODY", "LIQUIDITY_PROVIDER", "ENTERING_TRADER", "CONTRA_TRADER", "POSITION_ACCOUNT" };
const int Product_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *Product_descriptions[]  
   { "AGENCY", "COMMODITY", "CORPORATE", "CURRENCY", "EQUITY", "GOVERNMENT", "INDEX", "LOAN", "MONEYMARKET", "MORTGAGE", "MUNICIPAL", "OTHER", "FINANCING" };
const char RoundingDirection_realm[]  
   { '0', '1', '2' };
const char *RoundingDirection_descriptions[]  
   { "ROUND_TO_NEAREST", "ROUND_DOWN", "ROUND_UP" };
const int DistribPaymentMethod_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
const char *DistribPaymentMethod_descriptions[]  
   { "CREST", "NSCC", "EUROCLEAR", "CLEARSTREAM", "CHEQUE", "TELEGRAPHIC_TRANSFER", "FEDWIRE", "DIRECT_CREDIT", "ACH_CREDIT", "BPAY", "HIGH_VALUE_CLEARING_SYSTEM", "REINVEST_IN_FUND" };
const char CancellationRights_realm[]  
   { 'M', 'N', 'O', 'Y' };
const char *CancellationRights_descriptions[]  
   { "NO_WAIVER_AGREEMENT", "NO_EXECUTION_ONLY", "NO_INSTITUTIONAL", "YES" };
const char MoneyLaunderingStatus_realm[]  
   { '1', '2', '3', 'N', 'Y' };
const char *MoneyLaunderingStatus_descriptions[]  
   { "EXEMPT_BELOW_THE_LIMIT", "EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION", "EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION", "NOT_CHECKED", "PASSED" };
const char ExecPriceType_realm[]  
   { 'B', 'C', 'D', 'E', 'O', 'P', 'Q', 'S' };
const char *ExecPriceType_descriptions[]  
   { "BID_PRICE", "CREATION_PRICE", "CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT", "CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT", "OFFER_PRICE", "OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT", "OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT", "SINGLE_PRICE" };
const int TradeReportTransType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *TradeReportTransType_descriptions[]  
   { "NEW", "CANCEL", "REPLACE", "RELEASE", "REVERSE" };
const int PaymentMethod_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *PaymentMethod_descriptions[]  
   { "CREST", "NSCC", "EUROCLEAR", "CLEARSTREAM", "CHEQUE", "TELEGRAPHIC_TRANSFER", "FEDWIRE", "DEBIT_CARD", "DIRECT_DEBIT", "DIRECT_CREDIT", "CREDIT_CARD", "ACH_DEBIT", "ACH_CREDIT", "BPAY", "HIGH_VALUE_CLEARING_SYSTEM" };
const int TaxAdvantageType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 999 };
const char *TaxAdvantageType_descriptions[]  
   { "NONE", "MAXI_ISA", "TESSA", "MINI_CASH_ISA", "MINI_STOCKS_AND_SHARES_ISA", "MINI_INSURANCE_ISA", "CURRENT_YEAR_PAYMENT", "PRIOR_YEAR_PAYMENT", "ASSET_TRANSFER", "EMPLOYEE_PRIOR_YEAR", "OTHER" };
const char FundRenewWaiv_realm[]  
   { 'N', 'Y' };
const char *FundRenewWaiv_descriptions[]  
   { "NO", "YES" };
const char RegistStatus_realm[]  
   { 'A', 'H', 'N', 'R' };
const char *RegistStatus_descriptions[]  
   { "ACCEPTED", "HELD", "REMINDER", "REJECTED" };
const int RegistRejReasonCode_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 99 };
const char *RegistRejReasonCode_descriptions[]  
   { "INVALID_UNACCEPTABLE_ACCOUNT_TYPE", "INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE", "INVALID_UNACCEPTABLE_OWNERSHIP_TYPE", "INVALID_UNACCEPTABLE_NO_REG_DETLS", "INVALID_UNACCEPTABLE_REG_SEQ_NO", "INVALID_UNACCEPTABLE_REG_DTLS", "INVALID_UNACCEPTABLE_MAILING_DTLS", "INVALID_UNACCEPTABLE_MAILING_INST", "INVALID_UNACCEPTABLE_INVESTOR_ID", "INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE", "INVALID_UNACCEPTABLE_DATE_OF_BIRTH", "INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE", "INVALID_UNACCEPTABLE_NODISTRIBINSTNS", "INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE", "INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD", "INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME", "INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE", "INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM", "OTHER" };
const char RegistTransType_realm[]  
   { '0', '1', '2' };
const char *RegistTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const char OwnershipType_realm[]  
   { '2', 'J', 'T' };
const char *OwnershipType_descriptions[]  
   { "JOINT_TRUSTEES", "JOINT_INVESTORS", "TENANTS_IN_COMMON" };
const int ContAmtType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
const char *ContAmtType_descriptions[]  
   { "COMMISSION_AMOUNT", "COMMISSION_PERCENT", "INITIAL_CHARGE_AMOUNT", "INITIAL_CHARGE_PERCENT", "DISCOUNT_AMOUNT", "DISCOUNT_PERCENT", "DILUTION_LEVY_AMOUNT", "DILUTION_LEVY_PERCENT", "EXIT_CHARGE_AMOUNT" };
const int OwnerType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *OwnerType_descriptions[]  
   { "INDIVIDUAL_INVESTOR", "PUBLIC_COMPANY", "PRIVATE_COMPANY", "INDIVIDUAL_TRUSTEE", "COMPANY_TRUSTEE", "PENSION_PLAN", "CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT", "TRUSTS", "FIDUCIARIES", "NETWORKING_SUB_ACCOUNT", "NON_PROFIT_ORGANIZATION", "CORPORATE_BODY", "NOMINEE" };
const char OrderCapacity_realm[]  
   { 'A', 'G', 'I', 'P', 'R', 'W' };
const char *OrderCapacity_descriptions[]  
   { "AGENCY", "PROPRIETARY", "INDIVIDUAL", "PRINCIPAL", "RISKLESS_PRINCIPAL", "AGENT_FOR_OTHER_MEMBER" };
const f8String OrderRestrictions_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A" };
const char *OrderRestrictions_descriptions[]  
   { "PROGRAM_TRADE", "INDEX_ARBITRAGE", "NON_INDEX_ARBITRAGE", "COMPETING_MARKET_MAKER", "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY", "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY", "FOREIGN_ENTITY", "EXTERNAL_MARKET_PARTICIPANT", "EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE", "RISKLESS_ARBITRAGE" };
const char MassCancelRequestType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7' };
const char *MassCancelRequestType_descriptions[]  
   { "CANCEL_ORDERS_FOR_A_SECURITY", "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY", "CANCEL_ORDERS_FOR_A_PRODUCT", "CANCEL_ORDERS_FOR_A_CFICODE", "CANCEL_ORDERS_FOR_A_SECURITYTYPE", "CANCEL_ORDERS_FOR_A_TRADING_SESSION", "CANCEL_ALL_ORDERS" };
const char MassCancelResponse_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7' };
const char *MassCancelResponse_descriptions[]  
   { "CANCEL_REQUEST_REJECTED", "CANCEL_ORDERS_FOR_A_SECURITY", "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY", "CANCEL_ORDERS_FOR_A_PRODUCT", "CANCEL_ORDERS_FOR_A_CFICODE", "CANCEL_ORDERS_FOR_A_SECURITYTYPE", "CANCEL_ORDERS_FOR_A_TRADING_SESSION", "CANCEL_ALL_ORDERS" };
const char MassCancelRejectReason_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '9' };
const char *MassCancelRejectReason_descriptions[]  
   { "MASS_CANCEL_NOT_SUPPORTED", "INVALID_OR_UNKNOWN_SECURITY", "INVALID_OR_UNKNOWN_UNDERLYING", "INVALID_OR_UNKNOWN_PRODUCT", "INVALID_OR_UNKNOWN_CFICODE", "INVALID_OR_UNKNOWN_SECURITY_TYPE", "INVALID_OR_UNKNOWN_TRADING_SESSION", "OTHER" };
const int QuoteType_realm[]  
   { 0, 1, 2, 3 };
const char *QuoteType_descriptions[]  
   { "INDICATIVE", "TRADEABLE", "RESTRICTED_TRADEABLE", "COUNTER" };
const char CashMargin_realm[]  
   { '1', '2', '3' };
const char *CashMargin_descriptions[]  
   { "CASH", "MARGIN_OPEN", "MARGIN_CLOSE" };
const f8String Scope_realm[]  
   { "1", "2", "3" };
const char *Scope_descriptions[]  
   { "LOCAL", "NATIONAL", "GLOBAL" };
const int CrossType_realm[]  
   { 1, 2, 3, 4 };
const char *CrossType_descriptions[]  
   { "CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT", "CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED", "CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE", "CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE" };
const int CrossPrioritization_realm[]  
   { 0, 1, 2 };
const char *CrossPrioritization_descriptions[]  
   { "NONE", "BUY_SIDE_IS_PRIORITIZED", "SELL_SIDE_IS_PRIORITIZED" };
const int NoSides_realm[]  
   { 1, 2 };
const char *NoSides_descriptions[]  
   { "ONE_SIDE", "BOTH_SIDES" };
const int SecurityListRequestType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *SecurityListRequestType_descriptions[]  
   { "SYMBOL", "SECURITYTYPE_AND_OR_CFICODE", "PRODUCT", "TRADINGSESSIONID", "ALL_SECURITIES" };
const int SecurityRequestResult_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *SecurityRequestResult_descriptions[]  
   { "VALID_REQUEST", "INVALID_OR_UNSUPPORTED_REQUEST", "NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA", "NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA", "INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE", "REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED" };
const int MultiLegRptTypeReq_realm[]  
   { 0, 1, 2 };
const char *MultiLegRptTypeReq_descriptions[]  
   { "REPORT_BY_MULITLEG_SECURITY_ONLY", "REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY", "REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY" };
const int TradSesStatusRejReason_realm[]  
   { 1 };
const char *TradSesStatusRejReason_descriptions[]  
   { "UNKNOWN_OR_INVALID_TRADINGSESSIONID" };
const int TradeRequestType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *TradeRequestType_descriptions[]  
   { "ALL_TRADES", "MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST", "UNMATCHED_TRADES_THAT_MATCH_CRITERIA", "UNREPORTED_TRADES_THAT_MATCH_CRITERIA", "ADVISORIES_THAT_MATCH_CRITERIA" };
const char MatchStatus_realm[]  
   { '0', '1', '2' };
const char *MatchStatus_descriptions[]  
   { "COMPARED_MATCHED_OR_AFFIRMED", "UNCOMPARED_UNMATCHED_OR_UNAFFIRMED", "ADVISORY_OR_ALERT" };
const int ClearingInstruction_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *ClearingInstruction_descriptions[]  
   { "PROCESS_NORMALLY", "EXCLUDE_FROM_ALL_NETTING", "BILATERAL_NETTING_ONLY", "EX_CLEARING", "SPECIAL_TRADE", "MULTILATERAL_NETTING", "CLEAR_AGAINST_CENTRAL_COUNTERPARTY", "EXCLUDE_FROM_CENTRAL_COUNTERPARTY", "MANUAL_MODE", "AUTOMATIC_POSTING_MODE", "AUTOMATIC_GIVE_UP_MODE", "QUALIFIED_SERVICE_REPRESENTATIVE", "CUSTOMER_TRADE", "SELF_CLEARING" };
const int AccountType_realm[]  
   { 1, 2, 3, 4, 6, 7, 8 };
const char *AccountType_descriptions[]  
   { "ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS", "HOUSE_TRADER", "FLOOR_TRADER", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED", "ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED", "JOINT_BACKOFFICE_ACCOUNT" };
const int CustOrderCapacity_realm[]  
   { 1, 2, 3, 4 };
const char *CustOrderCapacity_descriptions[]  
   { "MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT", "CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT", "MEMBER_TRADING_FOR_ANOTHER_MEMBER", "ALL_OTHER" };
const int MassStatusReqType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8 };
const char *MassStatusReqType_descriptions[]  
   { "STATUS_FOR_ORDERS_FOR_A_SECURITY", "STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY", "STATUS_FOR_ORDERS_FOR_A_PRODUCT", "STATUS_FOR_ORDERS_FOR_A_CFICODE", "STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE", "STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION", "STATUS_FOR_ALL_ORDERS", "STATUS_FOR_ORDERS_FOR_A_PARTYID" };
const char DayBookingInst_realm[]  
   { '0', '1', '2' };
const char *DayBookingInst_descriptions[]  
   { "CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR", "SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING", "ACCUMULATE" };
const char BookingUnit_realm[]  
   { '0', '1', '2' };
const char *BookingUnit_descriptions[]  
   { "EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT", "AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER", "AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE" };
const char PreallocMethod_realm[]  
   { '0', '1' };
const char *PreallocMethod_descriptions[]  
   { "PRO_RATA", "DO_NOT_PRO_RATA" };
const int AllocType_realm[]  
   { 1, 2, 5, 7, 8 };
const char *AllocType_descriptions[]  
   { "CALCULATED", "PRELIMINARY", "READY_TO_BOOK_SINGLE_ORDER", "WAREHOUSE_INSTRUCTION", "REQUEST_TO_INTERMEDIARY" };
const f8String ClearingFeeIndicator_realm[]  
   { "B", "C", "E", "F", "H", "I", "L", "M" };
const char *ClearingFeeIndicator_descriptions[]  
   { "CBOE_MEMBER", "NON_MEMBER_AND_CUSTOMER", "EQUITY_MEMBER_AND_CLEARING_MEMBER", "FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS", "FIRMS_106H_AND_106J", "GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS", "LESSEE_AND_106F_EMPLOYEES", "ALL_OTHER_OWNERSHIP_TYPES" };
const int PriorityIndicator_realm[]  
   { 0, 1 };
const char *PriorityIndicator_descriptions[]  
   { "PRIORITY_UNCHANGED", "LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE" };
const int QuoteRequestRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 };
const char *QuoteRequestRejectReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "EXCHANGE_CLOSED", "QUOTE_REQUEST_EXCEEDS_LIMIT", "TOO_LATE_TO_ENTER", "INVALID_PRICE", "NOT_AUTHORIZED_TO_REQUEST_QUOTE", "NO_MATCH_FOR_INQUIRY", "NO_MARKET_FOR_INSTRUMENT", "NO_INVENTORY", "PASS", "OTHER" };
const int AcctIDSource_realm[]  
   { 1, 2, 3, 4, 5, 99 };
const char *AcctIDSource_descriptions[]  
   { "BIC", "SID_CODE", "TFM", "OMGEO", "DTCC_CODE", "OTHER" };
const int ConfirmStatus_realm[]  
   { 1, 2, 3, 4, 5 };
const char *ConfirmStatus_descriptions[]  
   { "RECEIVED", "MISMATCHED_ACCOUNT", "MISSING_SETTLEMENT_INSTRUCTIONS", "CONFIRMED", "REQUEST_REJECTED" };
const int ConfirmTransType_realm[]  
   { 0, 1, 2 };
const char *ConfirmTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const int DeliveryForm_realm[]  
   { 1, 2 };
const char *DeliveryForm_descriptions[]  
   { "BOOKENTRY", "BEARER" };
const int LegSwapType_realm[]  
   { 1, 2, 4, 5 };
const char *LegSwapType_descriptions[]  
   { "PAR_FOR_PAR", "MODIFIED_DURATION", "RISK", "PROCEEDS" };
const int QuotePriceType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
const char *QuotePriceType_descriptions[]  
   { "PERCENT", "PER_SHARE", "FIXED_AMOUNT", "DISCOUNT", "PREMIUM", "BASIS_POINTS_RELATIVE_TO_BENCHMARK", "TED_PRICE", "TED_YIELD", "YIELD_SPREAD", "YIELD" };
const int QuoteRespType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *QuoteRespType_descriptions[]  
   { "HIT_LIFT", "COUNTER", "EXPIRED", "COVER", "DONE_AWAY", "PASS" };
const f8String PosType_realm[]  
   { "ALC", "AS", "ASF", "DLV", "ETR", "EX", "FIN", "IAS", "IES", "PA", "PIT", "SOD", "SPL", "TA", "TOT", "TQ", "TRF", "TX", "XM" };
const char *PosType_descriptions[]  
   { "ALLOCATION_TRADE_QTY", "OPTION_ASSIGNMENT", "AS_OF_TRADE_QTY", "DELIVERY_QTY", "ELECTRONIC_TRADE_QTY", "OPTION_EXERCISE_QTY", "END_OF_DAY_QTY", "INTRA_SPREAD_QTY", "INTER_SPREAD_QTY", "ADJUSTMENT_QTY", "PIT_TRADE_QTY", "START_OF_DAY_QTY", "INTEGRAL_SPLIT", "TRANSACTION_FROM_ASSIGNMENT", "TOTAL_TRANSACTION_QTY", "TRANSACTION_QUANTITY", "TRANSFER_TRADE_QTY", "TRANSACTION_FROM_EXERCISE", "CROSS_MARGIN_QTY" };
const int PosQtyStatus_realm[]  
   { 0, 1, 2 };
const char *PosQtyStatus_descriptions[]  
   { "SUBMITTED", "ACCEPTED", "REJECTED" };
const f8String PosAmtType_realm[]  
   { "CASH", "CRES", "FMTM", "IMTM", "PREM", "SMTM", "TVAR", "VADJ" };
const char *PosAmtType_descriptions[]  
   { "CASH_AMOUNT", "CASH_RESIDUAL_AMOUNT", "FINAL_MARK_TO_MARKET_AMOUNT", "INCREMENTAL_MARK_TO_MARKET_AMOUNT", "PREMIUM_AMOUNT", "START_OF_DAY_MARK_TO_MARKET_AMOUNT", "TRADE_VARIATION_AMOUNT", "VALUE_ADJUSTED_AMOUNT" };
const int PosTransType_realm[]  
   { 1, 2, 3, 4, 5 };
const char *PosTransType_descriptions[]  
   { "EXERCISE", "DO_NOT_EXERCISE", "POSITION_ADJUSTMENT", "POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION", "PLEDGE" };
const int PosMaintAction_realm[]  
   { 1, 2, 3 };
const char *PosMaintAction_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const int AdjustmentType_realm[]  
   { 0, 1, 2, 3 };
const char *AdjustmentType_descriptions[]  
   { "PROCESS_REQUEST_AS_MARGIN_DISPOSITION", "DELTA_PLUS", "DELTA_MINUS", "FINAL" };
const int PosMaintStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *PosMaintStatus_descriptions[]  
   { "ACCEPTED", "ACCEPTED_WITH_WARNINGS", "REJECTED", "COMPLETED", "COMPLETED_WITH_WARNINGS" };
const int PosMaintResult_realm[]  
   { 0, 1, 99 };
const char *PosMaintResult_descriptions[]  
   { "SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS", "REJECTED", "OTHER" };
const int PosReqType_realm[]  
   { 0, 1, 2, 3 };
const char *PosReqType_descriptions[]  
   { "POSITIONS", "TRADES", "EXERCISES", "ASSIGNMENTS" };
const int ResponseTransportType_realm[]  
   { 0, 1 };
const char *ResponseTransportType_descriptions[]  
   { "INBAND", "OUT_OF_BAND" };
const int PosReqResult_realm[]  
   { 0, 1, 2, 3, 4, 99 };
const char *PosReqResult_descriptions[]  
   { "VALID_REQUEST", "INVALID_OR_UNSUPPORTED_REQUEST", "NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA", "NOT_AUTHORIZED_TO_REQUEST_POSITIONS", "REQUEST_FOR_POSITION_NOT_SUPPORTED", "OTHER" };
const int PosReqStatus_realm[]  
   { 0, 1, 2 };
const char *PosReqStatus_descriptions[]  
   { "COMPLETED", "COMPLETED_WITH_WARNINGS", "REJECTED" };
const int SettlPriceType_realm[]  
   { 1, 2 };
const char *SettlPriceType_descriptions[]  
   { "FINAL", "THEORETICAL" };
const char AssignmentMethod_realm[]  
   { 'P', 'R' };
const char *AssignmentMethod_descriptions[]  
   { "PRORATA", "RANDOM" };
const char ExerciseMethod_realm[]  
   { 'A', 'M' };
const char *ExerciseMethod_descriptions[]  
   { "AUTOMATIC", "MANUAL" };
const int TradeRequestResult_realm[]  
   { 0, 1, 2, 3, 4, 5, 8, 9, 99 };
const char *TradeRequestResult_descriptions[]  
   { "SUCCESSFUL", "INVALID_OR_UNKNOWN_INSTRUMENT", "INVALID_TYPE_OF_TRADE_REQUESTED", "INVALID_PARTIES", "INVALID_TRANSPORT_TYPE_REQUESTED", "INVALID_DESTINATION_REQUESTED", "TRADEREQUESTTYPE_NOT_SUPPORTED", "UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST", "OTHER" };
const int TradeRequestStatus_realm[]  
   { 0, 1, 2 };
const char *TradeRequestStatus_descriptions[]  
   { "ACCEPTED", "COMPLETED", "REJECTED" };
const int TradeReportRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 99 };
const char *TradeReportRejectReason_descriptions[]  
   { "SUCCESSFUL", "INVALID_PARTY_INFORMATION", "UNKNOWN_INSTRUMENT", "UNAUTHORIZED_TO_REPORT_TRADES", "INVALID_TRADE_TYPE", "OTHER" };
const int SideMultiLegReportingType_realm[]  
   { 1, 2, 3 };
const char *SideMultiLegReportingType_descriptions[]  
   { "SINGLE_SECURITY", "INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY", "MULTI_LEG_SECURITY" };
const f8String BenchmarkSecurityIDSource_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J" };
const char *BenchmarkSecurityIDSource_descriptions[]  
   { "CUSIP", "SEDOL", "QUIK", "ISIN_NUMBER", "RIC_CODE", "ISO_CURRENCY_CODE", "ISO_COUNTRY_CODE", "EXCHANGE_SYMBOL", "CONSOLIDATED_TAPE_ASSOCIATION", "BLOOMBERG_SYMBOL", "WERTPAPIER", "DUTCH", "VALOREN", "SICOVAM", "BELGIAN", "COMMON", "CLEARING_HOUSE_CLEARING_ORGANIZATION", "ISDA_FPML_PRODUCT_SPECIFICATION", "OPTIONS_PRICE_REPORTING_AUTHORITY" };
const int TrdRegTimestampType_realm[]  
   { 1, 2, 3, 4, 5 };
const char *TrdRegTimestampType_descriptions[]  
   { "EXECUTION_TIME", "TIME_IN", "TIME_OUT", "BROKER_RECEIPT", "BROKER_EXECUTION" };
const int ConfirmType_realm[]  
   { 1, 2, 3 };
const char *ConfirmType_descriptions[]  
   { "STATUS", "CONFIRMATION", "CONFIRMATION_REQUEST_REJECTED" };
const int ConfirmRejReason_realm[]  
   { 1, 2, 99 };
const char *ConfirmRejReason_descriptions[]  
   { "MISMATCHED_ACCOUNT", "MISSING_SETTLEMENT_INSTRUCTIONS", "OTHER" };
const int BookingType_realm[]  
   { 0, 1, 2 };
const char *BookingType_descriptions[]  
   { "REGULAR_BOOKING", "CFD", "TOTAL_RETURN_SWAP" };
const int AllocSettlInstType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *AllocSettlInstType_descriptions[]  
   { "USE_DEFAULT_INSTRUCTIONS", "DERIVE_FROM_PARAMETERS_PROVIDED", "FULL_DETAILS_PROVIDED", "SSI_DB_IDS_PROVIDED", "PHONE_FOR_INSTRUCTIONS" };
const char DlvyInstType_realm[]  
   { 'C', 'S' };
const char *DlvyInstType_descriptions[]  
   { "CASH", "SECURITIES" };
const int TerminationType_realm[]  
   { 1, 2, 3, 4 };
const char *TerminationType_descriptions[]  
   { "OVERNIGHT", "TERM", "FLEXIBLE", "OPEN" };
const int SettlInstReqRejCode_realm[]  
   { 0, 1, 2, 99 };
const char *SettlInstReqRejCode_descriptions[]  
   { "UNABLE_TO_PROCESS_REQUEST", "UNKNOWN_ACCOUNT", "NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND", "OTHER" };
const int AllocReportType_realm[]  
   { 3, 4, 5, 8 };
const char *AllocReportType_descriptions[]  
   { "SELLSIDE_CALCULATED_USING_PRELIMINARY", "SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY", "WAREHOUSE_RECAP", "REQUEST_TO_INTERMEDIARY" };
const int AllocCancReplaceReason_realm[]  
   { 1, 2 };
const char *AllocCancReplaceReason_descriptions[]  
   { "ORIGINAL_DETAILS_INCOMPLETE_INCORRECT", "CHANGE_IN_UNDERLYING_ORDER_DETAILS" };
const int AllocAccountType_realm[]  
   { 1, 2, 3, 4, 6, 7, 8 };
const char *AllocAccountType_descriptions[]  
   { "ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS", "HOUSE_TRADER", "FLOOR_TRADER", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED", "ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED", "JOINT_BACKOFFICE_ACCOUNT" };
const int AllocIntermedReqType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *AllocIntermedReqType_descriptions[]  
   { "PENDING_ACCEPT", "PENDING_RELEASE", "PENDING_REVERSAL", "ACCEPT", "BLOCK_LEVEL_REJECT", "ACCOUNT_LEVEL_REJECT" };
const int ApplQueueResolution_realm[]  
   { 0, 1, 2, 3 };
const char *ApplQueueResolution_descriptions[]  
   { "NO_ACTION_TAKEN", "QUEUE_FLUSHED", "OVERLAY_LAST", "END_SESSION" };
const int ApplQueueAction_realm[]  
   { 0, 1, 2, 3 };
const char *ApplQueueAction_descriptions[]  
   { "NO_ACTION_TAKEN", "QUEUE_FLUSHED", "OVERLAY_LAST", "END_SESSION" };
const int AvgPxIndicator_realm[]  
   { 0, 1, 2 };
const char *AvgPxIndicator_descriptions[]  
   { "NO_AVERAGE_PRICING", "TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID", "LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID" };
const int TradeAllocIndicator_realm[]  
   { 0, 1, 2 };
const char *TradeAllocIndicator_descriptions[]  
   { "ALLOCATION_NOT_REQUIRED", "ALLOCATION_REQUIRED", "USE_ALLOCATION_PROVIDED_WITH_THE_TRADE" };
const int ExpirationCycle_realm[]  
   { 0, 1 };
const char *ExpirationCycle_descriptions[]  
   { "EXPIRE_ON_TRADING_SESSION_CLOSE", "EXPIRE_ON_TRADING_SESSION_OPEN" };
const int TrdType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
const char *TrdType_descriptions[]  
   { "REGULAR_TRADE", "BLOCK_TRADE", "EFP", "TRANSFER", "LATE_TRADE", "T_TRADE", "WEIGHTED_AVERAGE_PRICE_TRADE", "BUNCHED_TRADE", "LATE_BUNCHED_TRADE", "PRIOR_REFERENCE_PRICE_TRADE", "AFTER_HOURS_TRADE" };
const int PegMoveType_realm[]  
   { 0, 1 };
const char *PegMoveType_descriptions[]  
   { "FLOATING", "FIXED" };
const int PegOffsetType_realm[]  
   { 0, 1, 2, 3 };
const char *PegOffsetType_descriptions[]  
   { "PRICE", "BASIS_POINTS", "TICKS", "PRICE_TIER_LEVEL" };
const int PegLimitType_realm[]  
   { 0, 1, 2 };
const char *PegLimitType_descriptions[]  
   { "OR_BETTER", "STRICT", "OR_WORSE" };
const int PegRoundDirection_realm[]  
   { 1, 2 };
const char *PegRoundDirection_descriptions[]  
   { "MORE_AGGRESSIVE", "MORE_PASSIVE" };
const int PegScope_realm[]  
   { 1, 2, 3, 4 };
const char *PegScope_descriptions[]  
   { "LOCAL", "NATIONAL", "GLOBAL", "NATIONAL_EXCLUDING_LOCAL" };
const int DiscretionMoveType_realm[]  
   { 0, 1 };
const char *DiscretionMoveType_descriptions[]  
   { "FLOATING", "FIXED" };
const int DiscretionOffsetType_realm[]  
   { 0, 1, 2, 3 };
const char *DiscretionOffsetType_descriptions[]  
   { "PRICE", "BASIS_POINTS", "TICKS", "PRICE_TIER_LEVEL" };
const int DiscretionLimitType_realm[]  
   { 0, 1, 2 };
const char *DiscretionLimitType_descriptions[]  
   { "OR_BETTER", "STRICT", "OR_WORSE" };
const int DiscretionRoundDirection_realm[]  
   { 1, 2 };
const char *DiscretionRoundDirection_descriptions[]  
   { "MORE_AGGRESSIVE", "MORE_PASSIVE" };
const int DiscretionScope_realm[]  
   { 1, 2, 3, 4 };
const char *DiscretionScope_descriptions[]  
   { "LOCAL", "NATIONAL", "GLOBAL", "NATIONAL_EXCLUDING_LOCAL" };
const int LastLiquidityInd_realm[]  
   { 1, 2, 3 };
const char *LastLiquidityInd_descriptions[]  
   { "ADDED_LIQUIDITY", "REMOVED_LIQUIDITY", "LIQUIDITY_ROUTED_OUT" };
const int ShortSaleReason_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *ShortSaleReason_descriptions[]  
   { "DEALER_SOLD_SHORT", "DEALER_SOLD_SHORT_EXEMPT", "SELLING_CUSTOMER_SOLD_SHORT", "SELLING_CUSTOMER_SOLD_SHORT_EXEMPT", "QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT", "QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT" };
const int QtyType_realm[]  
   { 0, 1 };
const char *QtyType_descriptions[]  
   { "UNITS", "CONTRACTS" };
const int TradeReportType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *TradeReportType_descriptions[]  
   { "SUBMIT", "ALLEGED", "ACCEPT", "DECLINE", "ADDENDUM", "NO_WAS", "TRADE_REPORT_CANCEL", "LOCKED_IN_TRADE_BREAK" };
const int AllocNoOrdersType_realm[]  
   { 0, 1 };
const char *AllocNoOrdersType_descriptions[]  
   { "NOT_SPECIFIED", "EXPLICIT_LIST_PROVIDED" };
const int EventType_realm[]  
   { 1, 2, 3, 4, 99 };
const char *EventType_descriptions[]  
   { "PUT", "CALL", "TENDER", "SINKING_FUND_CALL", "OTHER" };
const int InstrAttribType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 99 };
const char *InstrAttribType_descriptions[]  
   { "FLAT", "ZERO_COUPON", "INTEREST_BEARING", "NO_PERIODIC_PAYMENTS", "VARIABLE_RATE", "LESS_FEE_FOR_PUT", "STEPPED_COUPON", "COUPON_PERIOD", "WHEN_AND_IF_ISSUED", "ORIGINAL_ISSUE_DISCOUNT", "CALLABLE_PUTTABLE", "ESCROWED_TO_MATURITY", "ESCROWED_TO_REDEMPTION_DATE", "PRE_REFUNDED", "IN_DEFAULT", "UNRATED", "TAXABLE", "INDEXED", "SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX", "ORIGINAL_ISSUE_DISCOUNT_PRICE", "CALLABLE_BELOW_MATURITY_VALUE", "CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED", "TEXT" };
const int MiscFeeBasis_realm[]  
   { 0, 1, 2 };
const char *MiscFeeBasis_descriptions[]  
   { "ABSOLUTE", "PER_UNIT", "PERCENTAGE" };
const int CollAsgnReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *CollAsgnReason_descriptions[]  
   { "INITIAL", "SCHEDULED", "TIME_WARNING", "MARGIN_DEFICIENCY", "MARGIN_EXCESS", "FORWARD_COLLATERAL_DEMAND", "EVENT_OF_DEFAULT", "ADVERSE_TAX_EVENT" };
const int CollInquiryQualifier_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *CollInquiryQualifier_descriptions[]  
   { "TRADEDATE", "GC_INSTRUMENT", "COLLATERALINSTRUMENT", "SUBSTITUTION_ELIGIBLE", "NOT_ASSIGNED", "PARTIALLY_ASSIGNED", "FULLY_ASSIGNED", "OUTSTANDING_TRADES" };
const int CollAsgnTransType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollAsgnTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL", "RELEASE", "REVERSE" };
const int CollAsgnRespType_realm[]  
   { 0, 1, 2, 3 };
const char *CollAsgnRespType_descriptions[]  
   { "RECEIVED", "ACCEPTED", "DECLINED", "REJECTED" };
const int CollAsgnRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 99 };
const char *CollAsgnRejectReason_descriptions[]  
   { "UNKNOWN_DEAL", "UNKNOWN_OR_INVALID_INSTRUMENT", "UNAUTHORIZED_TRANSACTION", "INSUFFICIENT_COLLATERAL", "INVALID_TYPE_OF_COLLATERAL", "EXCESSIVE_SUBSTITUTION", "OTHER" };
const int CollStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollStatus_descriptions[]  
   { "UNASSIGNED", "PARTIALLY_ASSIGNED", "ASSIGNMENT_PROPOSED", "ASSIGNED", "CHALLENGED" };
const int DeliveryType_realm[]  
   { 0, 1, 2, 3 };
const char *DeliveryType_descriptions[]  
   { "VERSUS_PAYMENT", "FREE", "TRI_PARTY", "HOLD_IN_CUSTODY" };
const int UserRequestType_realm[]  
   { 1, 2, 3, 4 };
const char *UserRequestType_descriptions[]  
   { "LOGONUSER", "LOGOFFUSER", "CHANGEPASSWORDFORUSER", "REQUEST_INDIVIDUAL_USER_STATUS" };
const int UserStatus_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *UserStatus_descriptions[]  
   { "LOGGED_IN", "NOT_LOGGED_IN", "USER_NOT_RECOGNISED", "PASSWORD_INCORRECT", "PASSWORD_CHANGED", "OTHER" };
const int StatusValue_realm[]  
   { 1, 2, 3, 4 };
const char *StatusValue_descriptions[]  
   { "CONNECTED", "NOT_CONNECTED_DOWN_EXPECTED_UP", "NOT_CONNECTED_DOWN_EXPECTED_DOWN", "IN_PROCESS" };
const int NetworkRequestType_realm[]  
   { 1, 2, 4, 8 };
const char *NetworkRequestType_descriptions[]  
   { "SNAPSHOT", "SUBSCRIBE", "STOP_SUBSCRIBING", "LEVEL_OF_DETAIL" };
const int NetworkStatusResponseType_realm[]  
   { 1, 2 };
const char *NetworkStatusResponseType_descriptions[]  
   { "FULL", "INCREMENTAL_UPDATE" };
const int TrdRptStatus_realm[]  
   { 0, 1 };
const char *TrdRptStatus_descriptions[]  
   { "ACCEPTED", "REJECTED" };
const int AffirmStatus_realm[]  
   { 1, 2, 3 };
const char *AffirmStatus_descriptions[]  
   { "RECEIVED", "CONFIRM_REJECTED", "AFFIRMED" };
const int CollAction_realm[]  
   { 0, 1, 2 };
const char *CollAction_descriptions[]  
   { "RETAIN", "ADD", "REMOVE" };
const int CollInquiryStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollInquiryStatus_descriptions[]  
   { "ACCEPTED", "ACCEPTED_WITH_WARNINGS", "COMPLETED", "COMPLETED_WITH_WARNINGS", "REJECTED" };
const int CollInquiryResult_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 99 };
const char *CollInquiryResult_descriptions[]  
   { "SUCCESSFUL", "INVALID_OR_UNKNOWN_INSTRUMENT", "INVALID_OR_UNKNOWN_COLLATERAL_TYPE", "INVALID_PARTIES", "INVALID_TRANSPORT_TYPE_REQUESTED", "INVALID_DESTINATION_REQUESTED", "NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED", "NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED", "COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED", "UNAUTHORIZED_FOR_COLLATERAL_INQUIRY", "OTHER" };
const char MDEntryMakerSide_realm[]  
   { '1', '2' };
const char *MDEntryMakerSide_descriptions[]  
   { "BUY", "SELL" };

//-------------------------------------------------------------------------------------------------
const RealmBase realmbases[] 
{
   { reinterpret_cast<const void *>(AdvSide_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, AdvSide_descriptions },
   { reinterpret_cast<const void *>(AdvTransType_realm), RealmBase::dt_set, FieldTrait::ft_string, 3, AdvTransType_descriptions },
   { reinterpret_cast<const void *>(CommType_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, CommType_descriptions },
   { reinterpret_cast<const void *>(ExecInst_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 42, ExecInst_descriptions },
   { reinterpret_cast<const void *>(HandlInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, HandlInst_descriptions },
   { reinterpret_cast<const void *>(SecurityIDSource_realm), RealmBase::dt_set, FieldTrait::ft_string, 19, SecurityIDSource_descriptions },
   { reinterpret_cast<const void *>(IOIQltyInd_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, IOIQltyInd_descriptions },
   { reinterpret_cast<const void *>(IOITransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, IOITransType_descriptions },
   { reinterpret_cast<const void *>(LastCapacity_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, LastCapacity_descriptions },
   { reinterpret_cast<const void *>(MsgType_realm), RealmBase::dt_set, FieldTrait::ft_string, 93, MsgType_descriptions },
   { reinterpret_cast<const void *>(OrdStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 15, OrdStatus_descriptions },
   { reinterpret_cast<const void *>(OrdType_realm), RealmBase::dt_set, FieldTrait::ft_char, 23, OrdType_descriptions },
   { reinterpret_cast<const void *>(Side_realm), RealmBase::dt_set, FieldTrait::ft_char, 16, Side_descriptions },
   { reinterpret_cast<const void *>(TimeInForce_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, TimeInForce_descriptions },
   { reinterpret_cast<const void *>(Urgency_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, Urgency_descriptions },
   { reinterpret_cast<const void *>(SettlType_realm), RealmBase::dt_set, FieldTrait::ft_char, 10, SettlType_descriptions },
   { reinterpret_cast<const void *>(SymbolSfx_realm), RealmBase::dt_set, FieldTrait::ft_string, 2, SymbolSfx_descriptions },
   { reinterpret_cast<const void *>(AllocTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, AllocTransType_descriptions },
   { reinterpret_cast<const void *>(PositionEffect_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, PositionEffect_descriptions },
   { reinterpret_cast<const void *>(ProcessCode_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, ProcessCode_descriptions },
   { reinterpret_cast<const void *>(AllocStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AllocStatus_descriptions },
   { reinterpret_cast<const void *>(AllocRejCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 14, AllocRejCode_descriptions },
   { reinterpret_cast<const void *>(EmailType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, EmailType_descriptions },
   { reinterpret_cast<const void *>(EncryptMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, EncryptMethod_descriptions },
   { reinterpret_cast<const void *>(CxlRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CxlRejReason_descriptions },
   { reinterpret_cast<const void *>(OrdRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 17, OrdRejReason_descriptions },
   { reinterpret_cast<const void *>(IOIQualifier_realm), RealmBase::dt_set, FieldTrait::ft_char, 18, IOIQualifier_descriptions },
   { reinterpret_cast<const void *>(DKReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, DKReason_descriptions },
   { reinterpret_cast<const void *>(MiscFeeType_realm), RealmBase::dt_set, FieldTrait::ft_char, 9, MiscFeeType_descriptions },
   { reinterpret_cast<const void *>(ExecType_realm), RealmBase::dt_set, FieldTrait::ft_char, 19, ExecType_descriptions },
   { reinterpret_cast<const void *>(SettlCurrFxRateCalc_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, SettlCurrFxRateCalc_descriptions },
   { reinterpret_cast<const void *>(SettlInstMode_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, SettlInstMode_descriptions },
   { reinterpret_cast<const void *>(SettlInstTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, SettlInstTransType_descriptions },
   { reinterpret_cast<const void *>(SettlInstSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SettlInstSource_descriptions },
   { reinterpret_cast<const void *>(SecurityType_realm), RealmBase::dt_set, FieldTrait::ft_string, 94, SecurityType_descriptions },
   { reinterpret_cast<const void *>(StandInstDbType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, StandInstDbType_descriptions },
   { reinterpret_cast<const void *>(SettlDeliveryType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SettlDeliveryType_descriptions },
   { reinterpret_cast<const void *>(AllocLinkType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, AllocLinkType_descriptions },
   { reinterpret_cast<const void *>(PutOrCall_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PutOrCall_descriptions },
   { reinterpret_cast<const void *>(CoveredOrUncovered_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, CoveredOrUncovered_descriptions },
   { reinterpret_cast<const void *>(AllocHandlInst_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AllocHandlInst_descriptions },
   { reinterpret_cast<const void *>(RoutingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, RoutingType_descriptions },
   { reinterpret_cast<const void *>(BenchmarkCurveName_realm), RealmBase::dt_set, FieldTrait::ft_string, 12, BenchmarkCurveName_descriptions },
   { reinterpret_cast<const void *>(StipulationType_realm), RealmBase::dt_set, FieldTrait::ft_string, 59, StipulationType_descriptions },
   { reinterpret_cast<const void *>(StipulationValue_realm), RealmBase::dt_set, FieldTrait::ft_string, 14, StipulationValue_descriptions },
   { reinterpret_cast<const void *>(YieldType_realm), RealmBase::dt_set, FieldTrait::ft_string, 34, YieldType_descriptions },
   { reinterpret_cast<const void *>(SubscriptionRequestType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SubscriptionRequestType_descriptions },
   { reinterpret_cast<const void *>(MarketDepth_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, MarketDepth_descriptions },
   { reinterpret_cast<const void *>(MDUpdateType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, MDUpdateType_descriptions },
   { reinterpret_cast<const void *>(MDEntryType_realm), RealmBase::dt_set, FieldTrait::ft_char, 14, MDEntryType_descriptions },
   { reinterpret_cast<const void *>(TickDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, TickDirection_descriptions },
   { reinterpret_cast<const void *>(QuoteCondition_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 9, QuoteCondition_descriptions },
   { reinterpret_cast<const void *>(TradeCondition_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 17, TradeCondition_descriptions },
   { reinterpret_cast<const void *>(MDUpdateAction_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MDUpdateAction_descriptions },
   { reinterpret_cast<const void *>(MDReqRejReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 13, MDReqRejReason_descriptions },
   { reinterpret_cast<const void *>(DeleteReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, DeleteReason_descriptions },
   { reinterpret_cast<const void *>(OpenCloseSettlFlag_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 6, OpenCloseSettlFlag_descriptions },
   { reinterpret_cast<const void *>(FinancialStatus_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 2, FinancialStatus_descriptions },
   { reinterpret_cast<const void *>(CorporateAction_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 5, CorporateAction_descriptions },
   { reinterpret_cast<const void *>(QuoteStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 16, QuoteStatus_descriptions },
   { reinterpret_cast<const void *>(QuoteCancelType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, QuoteCancelType_descriptions },
   { reinterpret_cast<const void *>(QuoteRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, QuoteRejectReason_descriptions },
   { reinterpret_cast<const void *>(QuoteResponseLevel_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, QuoteResponseLevel_descriptions },
   { reinterpret_cast<const void *>(QuoteRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, QuoteRequestType_descriptions },
   { reinterpret_cast<const void *>(UnderlyingPutOrCall_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, UnderlyingPutOrCall_descriptions },
   { reinterpret_cast<const void *>(SecurityRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SecurityRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, SecurityResponseType_descriptions },
   { reinterpret_cast<const void *>(SecurityTradingStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 23, SecurityTradingStatus_descriptions },
   { reinterpret_cast<const void *>(HaltReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, HaltReason_descriptions },
   { reinterpret_cast<const void *>(Adjustment_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, Adjustment_descriptions },
   { reinterpret_cast<const void *>(TradSesMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradSesMethod_descriptions },
   { reinterpret_cast<const void *>(TradSesMode_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradSesMode_descriptions },
   { reinterpret_cast<const void *>(TradSesStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, TradSesStatus_descriptions },
   { reinterpret_cast<const void *>(MessageEncoding_realm), RealmBase::dt_set, FieldTrait::ft_string, 4, MessageEncoding_descriptions },
   { reinterpret_cast<const void *>(QuoteEntryRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, QuoteEntryRejectReason_descriptions },
   { reinterpret_cast<const void *>(SessionRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 19, SessionRejectReason_descriptions },
   { reinterpret_cast<const void *>(BidRequestTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, BidRequestTransType_descriptions },
   { reinterpret_cast<const void *>(ExecRestatementReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, ExecRestatementReason_descriptions },
   { reinterpret_cast<const void *>(BusinessRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, BusinessRejectReason_descriptions },
   { reinterpret_cast<const void *>(MsgDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, MsgDirection_descriptions },
   { reinterpret_cast<const void *>(DiscretionInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, DiscretionInst_descriptions },
   { reinterpret_cast<const void *>(BidType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BidType_descriptions },
   { reinterpret_cast<const void *>(BidDescriptorType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BidDescriptorType_descriptions },
   { reinterpret_cast<const void *>(SideValueInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, SideValueInd_descriptions },
   { reinterpret_cast<const void *>(LiquidityIndType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, LiquidityIndType_descriptions },
   { reinterpret_cast<const void *>(ProgRptReqs_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ProgRptReqs_descriptions },
   { reinterpret_cast<const void *>(IncTaxInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, IncTaxInd_descriptions },
   { reinterpret_cast<const void *>(BidTradeType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, BidTradeType_descriptions },
   { reinterpret_cast<const void *>(BasisPxType_realm), RealmBase::dt_set, FieldTrait::ft_char, 13, BasisPxType_descriptions },
   { reinterpret_cast<const void *>(PriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, PriceType_descriptions },
   { reinterpret_cast<const void *>(GTBookingInst_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, GTBookingInst_descriptions },
   { reinterpret_cast<const void *>(ListStatusType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, ListStatusType_descriptions },
   { reinterpret_cast<const void *>(NetGrossInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, NetGrossInd_descriptions },
   { reinterpret_cast<const void *>(ListOrderStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, ListOrderStatus_descriptions },
   { reinterpret_cast<const void *>(ListExecInstType_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, ListExecInstType_descriptions },
   { reinterpret_cast<const void *>(CxlRejResponseTo_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, CxlRejResponseTo_descriptions },
   { reinterpret_cast<const void *>(MultiLegReportingType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MultiLegReportingType_descriptions },
   { reinterpret_cast<const void *>(PartyIDSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 18, PartyIDSource_descriptions },
   { reinterpret_cast<const void *>(PartyRole_realm), RealmBase::dt_set, FieldTrait::ft_int, 37, PartyRole_descriptions },
   { reinterpret_cast<const void *>(Product_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, Product_descriptions },
   { reinterpret_cast<const void *>(RoundingDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, RoundingDirection_descriptions },
   { reinterpret_cast<const void *>(DistribPaymentMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, DistribPaymentMethod_descriptions },
   { reinterpret_cast<const void *>(CancellationRights_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, CancellationRights_descriptions },
   { reinterpret_cast<const void *>(MoneyLaunderingStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, MoneyLaunderingStatus_descriptions },
   { reinterpret_cast<const void *>(ExecPriceType_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, ExecPriceType_descriptions },
   { reinterpret_cast<const void *>(TradeReportTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TradeReportTransType_descriptions },
   { reinterpret_cast<const void *>(PaymentMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 15, PaymentMethod_descriptions },
   { reinterpret_cast<const void *>(TaxAdvantageType_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, TaxAdvantageType_descriptions },
   { reinterpret_cast<const void *>(FundRenewWaiv_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, FundRenewWaiv_descriptions },
   { reinterpret_cast<const void *>(RegistStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, RegistStatus_descriptions },
   { reinterpret_cast<const void *>(RegistRejReasonCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 19, RegistRejReasonCode_descriptions },
   { reinterpret_cast<const void *>(RegistTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, RegistTransType_descriptions },
   { reinterpret_cast<const void *>(OwnershipType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, OwnershipType_descriptions },
   { reinterpret_cast<const void *>(ContAmtType_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, ContAmtType_descriptions },
   { reinterpret_cast<const void *>(OwnerType_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, OwnerType_descriptions },
   { reinterpret_cast<const void *>(OrderCapacity_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, OrderCapacity_descriptions },
   { reinterpret_cast<const void *>(OrderRestrictions_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 10, OrderRestrictions_descriptions },
   { reinterpret_cast<const void *>(MassCancelRequestType_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, MassCancelRequestType_descriptions },
   { reinterpret_cast<const void *>(MassCancelResponse_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, MassCancelResponse_descriptions },
   { reinterpret_cast<const void *>(MassCancelRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, MassCancelRejectReason_descriptions },
   { reinterpret_cast<const void *>(QuoteType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, QuoteType_descriptions },
   { reinterpret_cast<const void *>(CashMargin_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, CashMargin_descriptions },
   { reinterpret_cast<const void *>(Scope_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 3, Scope_descriptions },
   { reinterpret_cast<const void *>(CrossType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CrossType_descriptions },
   { reinterpret_cast<const void *>(CrossPrioritization_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CrossPrioritization_descriptions },
   { reinterpret_cast<const void *>(NoSides_realm), RealmBase::dt_set, FieldTrait::ft_NumInGroup, 2, NoSides_descriptions },
   { reinterpret_cast<const void *>(SecurityListRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, SecurityListRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityRequestResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, SecurityRequestResult_descriptions },
   { reinterpret_cast<const void *>(MultiLegRptTypeReq_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MultiLegRptTypeReq_descriptions },
   { reinterpret_cast<const void *>(TradSesStatusRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 1, TradSesStatusRejReason_descriptions },
   { reinterpret_cast<const void *>(TradeRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TradeRequestType_descriptions },
   { reinterpret_cast<const void *>(MatchStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MatchStatus_descriptions },
   { reinterpret_cast<const void *>(ClearingInstruction_realm), RealmBase::dt_set, FieldTrait::ft_int, 14, ClearingInstruction_descriptions },
   { reinterpret_cast<const void *>(AccountType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, AccountType_descriptions },
   { reinterpret_cast<const void *>(CustOrderCapacity_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CustOrderCapacity_descriptions },
   { reinterpret_cast<const void *>(MassStatusReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, MassStatusReqType_descriptions },
   { reinterpret_cast<const void *>(DayBookingInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, DayBookingInst_descriptions },
   { reinterpret_cast<const void *>(BookingUnit_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, BookingUnit_descriptions },
   { reinterpret_cast<const void *>(PreallocMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, PreallocMethod_descriptions },
   { reinterpret_cast<const void *>(AllocType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, AllocType_descriptions },
   { reinterpret_cast<const void *>(ClearingFeeIndicator_realm), RealmBase::dt_set, FieldTrait::ft_string, 8, ClearingFeeIndicator_descriptions },
   { reinterpret_cast<const void *>(PriorityIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PriorityIndicator_descriptions },
   { reinterpret_cast<const void *>(QuoteRequestRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, QuoteRequestRejectReason_descriptions },
   { reinterpret_cast<const void *>(AcctIDSource_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AcctIDSource_descriptions },
   { reinterpret_cast<const void *>(ConfirmStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, ConfirmStatus_descriptions },
   { reinterpret_cast<const void *>(ConfirmTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmTransType_descriptions },
   { reinterpret_cast<const void *>(DeliveryForm_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DeliveryForm_descriptions },
   { reinterpret_cast<const void *>(LegSwapType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, LegSwapType_descriptions },
   { reinterpret_cast<const void *>(QuotePriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, QuotePriceType_descriptions },
   { reinterpret_cast<const void *>(QuoteRespType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, QuoteRespType_descriptions },
   { reinterpret_cast<const void *>(PosType_realm), RealmBase::dt_set, FieldTrait::ft_string, 19, PosType_descriptions },
   { reinterpret_cast<const void *>(PosQtyStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosQtyStatus_descriptions },
   { reinterpret_cast<const void *>(PosAmtType_realm), RealmBase::dt_set, FieldTrait::ft_string, 8, PosAmtType_descriptions },
   { reinterpret_cast<const void *>(PosTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, PosTransType_descriptions },
   { reinterpret_cast<const void *>(PosMaintAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosMaintAction_descriptions },
   { reinterpret_cast<const void *>(AdjustmentType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, AdjustmentType_descriptions },
   { reinterpret_cast<const void *>(PosMaintStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, PosMaintStatus_descriptions },
   { reinterpret_cast<const void *>(PosMaintResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosMaintResult_descriptions },
   { reinterpret_cast<const void *>(PosReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PosReqType_descriptions },
   { reinterpret_cast<const void *>(ResponseTransportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ResponseTransportType_descriptions },
   { reinterpret_cast<const void *>(PosReqResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, PosReqResult_descriptions },
   { reinterpret_cast<const void *>(PosReqStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosReqStatus_descriptions },
   { reinterpret_cast<const void *>(SettlPriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, SettlPriceType_descriptions },
   { reinterpret_cast<const void *>(AssignmentMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, AssignmentMethod_descriptions },
   { reinterpret_cast<const void *>(ExerciseMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, ExerciseMethod_descriptions },
   { reinterpret_cast<const void *>(TradeRequestResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, TradeRequestResult_descriptions },
   { reinterpret_cast<const void *>(TradeRequestStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradeRequestStatus_descriptions },
   { reinterpret_cast<const void *>(TradeReportRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, TradeReportRejectReason_descriptions },
   { reinterpret_cast<const void *>(SideMultiLegReportingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, SideMultiLegReportingType_descriptions },
   { reinterpret_cast<const void *>(BenchmarkSecurityIDSource_realm), RealmBase::dt_set, FieldTrait::ft_string, 19, BenchmarkSecurityIDSource_descriptions },
   { reinterpret_cast<const void *>(TrdRegTimestampType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TrdRegTimestampType_descriptions },
   { reinterpret_cast<const void *>(ConfirmType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmType_descriptions },
   { reinterpret_cast<const void *>(ConfirmRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmRejReason_descriptions },
   { reinterpret_cast<const void *>(BookingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BookingType_descriptions },
   { reinterpret_cast<const void *>(AllocSettlInstType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, AllocSettlInstType_descriptions },
   { reinterpret_cast<const void *>(DlvyInstType_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, DlvyInstType_descriptions },
   { reinterpret_cast<const void *>(TerminationType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, TerminationType_descriptions },
   { reinterpret_cast<const void *>(SettlInstReqRejCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SettlInstReqRejCode_descriptions },
   { reinterpret_cast<const void *>(AllocReportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, AllocReportType_descriptions },
   { reinterpret_cast<const void *>(AllocCancReplaceReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, AllocCancReplaceReason_descriptions },
   { reinterpret_cast<const void *>(AllocAccountType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, AllocAccountType_descriptions },
   { reinterpret_cast<const void *>(AllocIntermedReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AllocIntermedReqType_descriptions },
   { reinterpret_cast<const void *>(ApplQueueResolution_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ApplQueueResolution_descriptions },
   { reinterpret_cast<const void *>(ApplQueueAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ApplQueueAction_descriptions },
   { reinterpret_cast<const void *>(AvgPxIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AvgPxIndicator_descriptions },
   { reinterpret_cast<const void *>(TradeAllocIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradeAllocIndicator_descriptions },
   { reinterpret_cast<const void *>(ExpirationCycle_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ExpirationCycle_descriptions },
   { reinterpret_cast<const void *>(TrdType_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, TrdType_descriptions },
   { reinterpret_cast<const void *>(PegMoveType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PegMoveType_descriptions },
   { reinterpret_cast<const void *>(PegOffsetType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PegOffsetType_descriptions },
   { reinterpret_cast<const void *>(PegLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PegLimitType_descriptions },
   { reinterpret_cast<const void *>(PegRoundDirection_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PegRoundDirection_descriptions },
   { reinterpret_cast<const void *>(PegScope_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PegScope_descriptions },
   { reinterpret_cast<const void *>(DiscretionMoveType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DiscretionMoveType_descriptions },
   { reinterpret_cast<const void *>(DiscretionOffsetType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DiscretionOffsetType_descriptions },
   { reinterpret_cast<const void *>(DiscretionLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, DiscretionLimitType_descriptions },
   { reinterpret_cast<const void *>(DiscretionRoundDirection_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DiscretionRoundDirection_descriptions },
   { reinterpret_cast<const void *>(DiscretionScope_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DiscretionScope_descriptions },
   { reinterpret_cast<const void *>(LastLiquidityInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, LastLiquidityInd_descriptions },
   { reinterpret_cast<const void *>(ShortSaleReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, ShortSaleReason_descriptions },
   { reinterpret_cast<const void *>(QtyType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, QtyType_descriptions },
   { reinterpret_cast<const void *>(TradeReportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, TradeReportType_descriptions },
   { reinterpret_cast<const void *>(AllocNoOrdersType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, AllocNoOrdersType_descriptions },
   { reinterpret_cast<const void *>(EventType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, EventType_descriptions },
   { reinterpret_cast<const void *>(InstrAttribType_realm), RealmBase::dt_set, FieldTrait::ft_int, 23, InstrAttribType_descriptions },
   { reinterpret_cast<const void *>(MiscFeeBasis_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MiscFeeBasis_descriptions },
   { reinterpret_cast<const void *>(CollAsgnReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CollAsgnReason_descriptions },
   { reinterpret_cast<const void *>(CollInquiryQualifier_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CollInquiryQualifier_descriptions },
   { reinterpret_cast<const void *>(CollAsgnTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollAsgnTransType_descriptions },
   { reinterpret_cast<const void *>(CollAsgnRespType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CollAsgnRespType_descriptions },
   { reinterpret_cast<const void *>(CollAsgnRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, CollAsgnRejectReason_descriptions },
   { reinterpret_cast<const void *>(CollStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollStatus_descriptions },
   { reinterpret_cast<const void *>(DeliveryType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DeliveryType_descriptions },
   { reinterpret_cast<const void *>(UserRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, UserRequestType_descriptions },
   { reinterpret_cast<const void *>(UserStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, UserStatus_descriptions },
   { reinterpret_cast<const void *>(StatusValue_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, StatusValue_descriptions },
   { reinterpret_cast<const void *>(NetworkRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, NetworkRequestType_descriptions },
   { reinterpret_cast<const void *>(NetworkStatusResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, NetworkStatusResponseType_descriptions },
   { reinterpret_cast<const void *>(TrdRptStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, TrdRptStatus_descriptions },
   { reinterpret_cast<const void *>(AffirmStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AffirmStatus_descriptions },
   { reinterpret_cast<const void *>(CollAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CollAction_descriptions },
   { reinterpret_cast<const void *>(CollInquiryStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollInquiryStatus_descriptions },
   { reinterpret_cast<const void *>(CollInquiryResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, CollInquiryResult_descriptions },
   { reinterpret_cast<const void *>(MDEntryMakerSide_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, MDEntryMakerSide_descriptions },
};

//-------------------------------------------------------------------------------------------------

} // namespace

//-------------------------------------------------------------------------------------------------
extern const gemini_BaseEntry::Pair fldpairs[];
const gemini_BaseEntry::Pair fldpairs[] 
{
   { 1, { Type2Type<GEMINI::Account>(), "Account", 1 } },
   { 2, { Type2Type<GEMINI::AdvId>(), "AdvId", 2 } },
   { 3, { Type2Type<GEMINI::AdvRefID>(), "AdvRefID", 3 } },
   { 4, { Type2Type<GEMINI::AdvSide, char>(), "AdvSide", 4, &GEMINI::realmbases[0] } },
   { 5, { Type2Type<GEMINI::AdvTransType, f8String>(), "AdvTransType", 5, &GEMINI::realmbases[1] } },
   { 6, { Type2Type<GEMINI::AvgPx>(), "AvgPx", 6 } },
   { 7, { Type2Type<GEMINI::BeginSeqNo>(), "BeginSeqNo", 7 } },
   { 8, { Type2Type<GEMINI::BeginString>(), "BeginString", 8 } },
   { 9, { Type2Type<GEMINI::BodyLength>(), "BodyLength", 9 } },
   { 10, { Type2Type<GEMINI::CheckSum>(), "CheckSum", 10 } },
   { 11, { Type2Type<GEMINI::ClOrdID>(), "ClOrdID", 11 } },
   { 12, { Type2Type<GEMINI::Commission>(), "Commission", 12 } },
   { 13, { Type2Type<GEMINI::CommType, char>(), "CommType", 13, &GEMINI::realmbases[2] } },
   { 14, { Type2Type<GEMINI::CumQty>(), "CumQty", 14 } },
   { 15, { Type2Type<GEMINI::Currency>(), "Currency", 15 } },
   { 16, { Type2Type<GEMINI::EndSeqNo>(), "EndSeqNo", 16 } },
   { 17, { Type2Type<GEMINI::ExecID>(), "ExecID", 17 } },
   { 18, { Type2Type<GEMINI::ExecInst, f8String>(), "ExecInst", 18, &GEMINI::realmbases[3] } },
   { 19, { Type2Type<GEMINI::ExecRefID>(), "ExecRefID", 19 } },
   { 21, { Type2Type<GEMINI::HandlInst, char>(), "HandlInst", 21, &GEMINI::realmbases[4] } },
   { 22, { Type2Type<GEMINI::SecurityIDSource, f8String>(), "SecurityIDSource", 22, &GEMINI::realmbases[5] } },
   { 23, { Type2Type<GEMINI::IOIID>(), "IOIID", 23 } },
   { 25, { Type2Type<GEMINI::IOIQltyInd, char>(), "IOIQltyInd", 25, &GEMINI::realmbases[6] } },
   { 26, { Type2Type<GEMINI::IOIRefID>(), "IOIRefID", 26 } },
   { 27, { Type2Type<GEMINI::IOIQty>(), "IOIQty", 27 } },
   { 28, { Type2Type<GEMINI::IOITransType, char>(), "IOITransType", 28, &GEMINI::realmbases[7] } },
   { 29, { Type2Type<GEMINI::LastCapacity, char>(), "LastCapacity", 29, &GEMINI::realmbases[8] } },
   { 30, { Type2Type<GEMINI::LastMkt>(), "LastMkt", 30 } },
   { 31, { Type2Type<GEMINI::LastPx>(), "LastPx", 31 } },
   { 32, { Type2Type<GEMINI::LastQty>(), "LastQty", 32 } },
   { 33, { Type2Type<GEMINI::LinesOfText>(), "LinesOfText", 33 } },
   { 34, { Type2Type<GEMINI::MsgSeqNum>(), "MsgSeqNum", 34 } },
   { 35, { Type2Type<GEMINI::MsgType, f8String>(), "MsgType", 35, &GEMINI::realmbases[9] } },
   { 36, { Type2Type<GEMINI::NewSeqNo>(), "NewSeqNo", 36 } },
   { 37, { Type2Type<GEMINI::OrderID>(), "OrderID", 37 } },
   { 38, { Type2Type<GEMINI::OrderQty>(), "OrderQty", 38 } },
   { 39, { Type2Type<GEMINI::OrdStatus, char>(), "OrdStatus", 39, &GEMINI::realmbases[10] } },
   { 40, { Type2Type<GEMINI::OrdType, char>(), "OrdType", 40, &GEMINI::realmbases[11] } },
   { 41, { Type2Type<GEMINI::OrigClOrdID>(), "OrigClOrdID", 41 } },
   { 42, { Type2Type<GEMINI::OrigTime>(), "OrigTime", 42 } },
   { 43, { Type2Type<GEMINI::PossDupFlag>(), "PossDupFlag", 43 } },
   { 44, { Type2Type<GEMINI::Price>(), "Price", 44 } },
   { 45, { Type2Type<GEMINI::RefSeqNum>(), "RefSeqNum", 45 } },
   { 48, { Type2Type<GEMINI::SecurityID>(), "SecurityID", 48 } },
   { 49, { Type2Type<GEMINI::SenderCompID>(), "SenderCompID", 49 } },
   { 50, { Type2Type<GEMINI::SenderSubID>(), "SenderSubID", 50 } },
   { 52, { Type2Type<GEMINI::SendingTime>(), "SendingTime", 52 } },
   { 53, { Type2Type<GEMINI::Quantity>(), "Quantity", 53 } },
   { 54, { Type2Type<GEMINI::Side, char>(), "Side", 54, &GEMINI::realmbases[12] } },
   { 55, { Type2Type<GEMINI::Symbol>(), "Symbol", 55 } },
   { 56, { Type2Type<GEMINI::TargetCompID>(), "TargetCompID", 56 } },
   { 57, { Type2Type<GEMINI::TargetSubID>(), "TargetSubID", 57 } },
   { 58, { Type2Type<GEMINI::Text>(), "Text", 58 } },
   { 59, { Type2Type<GEMINI::TimeInForce, char>(), "TimeInForce", 59, &GEMINI::realmbases[13] } },
   { 60, { Type2Type<GEMINI::TransactTime>(), "TransactTime", 60 } },
   { 61, { Type2Type<GEMINI::Urgency, char>(), "Urgency", 61, &GEMINI::realmbases[14] } },
   { 62, { Type2Type<GEMINI::ValidUntilTime>(), "ValidUntilTime", 62 } },
   { 63, { Type2Type<GEMINI::SettlType, char>(), "SettlType", 63, &GEMINI::realmbases[15] } },
   { 64, { Type2Type<GEMINI::SettlDate>(), "SettlDate", 64 } },
   { 65, { Type2Type<GEMINI::SymbolSfx, f8String>(), "SymbolSfx", 65, &GEMINI::realmbases[16] } },
   { 66, { Type2Type<GEMINI::ListID>(), "ListID", 66 } },
   { 67, { Type2Type<GEMINI::ListSeqNo>(), "ListSeqNo", 67 } },
   { 68, { Type2Type<GEMINI::TotNoOrders>(), "TotNoOrders", 68 } },
   { 69, { Type2Type<GEMINI::ListExecInst>(), "ListExecInst", 69 } },
   { 70, { Type2Type<GEMINI::AllocID>(), "AllocID", 70 } },
   { 71, { Type2Type<GEMINI::AllocTransType, char>(), "AllocTransType", 71, &GEMINI::realmbases[17] } },
   { 72, { Type2Type<GEMINI::RefAllocID>(), "RefAllocID", 72 } },
   { 73, { Type2Type<GEMINI::NoOrders>(), "NoOrders", 73 } },
   { 74, { Type2Type<GEMINI::AvgPxPrecision>(), "AvgPxPrecision", 74 } },
   { 75, { Type2Type<GEMINI::TradeDate>(), "TradeDate", 75 } },
   { 77, { Type2Type<GEMINI::PositionEffect, char>(), "PositionEffect", 77, &GEMINI::realmbases[18] } },
   { 78, { Type2Type<GEMINI::NoAllocs>(), "NoAllocs", 78 } },
   { 79, { Type2Type<GEMINI::AllocAccount>(), "AllocAccount", 79 } },
   { 80, { Type2Type<GEMINI::AllocQty>(), "AllocQty", 80 } },
   { 81, { Type2Type<GEMINI::ProcessCode, char>(), "ProcessCode", 81, &GEMINI::realmbases[19] } },
   { 82, { Type2Type<GEMINI::NoRpts>(), "NoRpts", 82 } },
   { 83, { Type2Type<GEMINI::RptSeq>(), "RptSeq", 83 } },
   { 84, { Type2Type<GEMINI::CxlQty>(), "CxlQty", 84 } },
   { 85, { Type2Type<GEMINI::NoDlvyInst>(), "NoDlvyInst", 85 } },
   { 87, { Type2Type<GEMINI::AllocStatus, int>(), "AllocStatus", 87, &GEMINI::realmbases[20] } },
   { 88, { Type2Type<GEMINI::AllocRejCode, int>(), "AllocRejCode", 88, &GEMINI::realmbases[21] } },
   { 89, { Type2Type<GEMINI::Signature>(), "Signature", 89 } },
   { 90, { Type2Type<GEMINI::SecureDataLen>(), "SecureDataLen", 90 } },
   { 91, { Type2Type<GEMINI::SecureData>(), "SecureData", 91 } },
   { 93, { Type2Type<GEMINI::SignatureLength>(), "SignatureLength", 93 } },
   { 94, { Type2Type<GEMINI::EmailType, char>(), "EmailType", 94, &GEMINI::realmbases[22] } },
   { 95, { Type2Type<GEMINI::RawDataLength>(), "RawDataLength", 95 } },
   { 96, { Type2Type<GEMINI::RawData>(), "RawData", 96 } },
   { 97, { Type2Type<GEMINI::PossResend>(), "PossResend", 97 } },
   { 98, { Type2Type<GEMINI::EncryptMethod, int>(), "EncryptMethod", 98, &GEMINI::realmbases[23] } },
   { 99, { Type2Type<GEMINI::StopPx>(), "StopPx", 99 } },
   { 100, { Type2Type<GEMINI::ExDestination>(), "ExDestination", 100 } },
   { 102, { Type2Type<GEMINI::CxlRejReason, int>(), "CxlRejReason", 102, &GEMINI::realmbases[24] } },
   { 103, { Type2Type<GEMINI::OrdRejReason, int>(), "OrdRejReason", 103, &GEMINI::realmbases[25] } },
   { 104, { Type2Type<GEMINI::IOIQualifier, char>(), "IOIQualifier", 104, &GEMINI::realmbases[26] } },
   { 106, { Type2Type<GEMINI::Issuer>(), "Issuer", 106 } },
   { 107, { Type2Type<GEMINI::SecurityDesc>(), "SecurityDesc", 107 } },
   { 108, { Type2Type<GEMINI::HeartBtInt>(), "HeartBtInt", 108 } },
   { 110, { Type2Type<GEMINI::MinQty>(), "MinQty", 110 } },
   { 111, { Type2Type<GEMINI::MaxFloor>(), "MaxFloor", 111 } },
   { 112, { Type2Type<GEMINI::TestReqID>(), "TestReqID", 112 } },
   { 113, { Type2Type<GEMINI::ReportToExch>(), "ReportToExch", 113 } },
   { 114, { Type2Type<GEMINI::LocateReqd>(), "LocateReqd", 114 } },
   { 115, { Type2Type<GEMINI::OnBehalfOfCompID>(), "OnBehalfOfCompID", 115 } },
   { 116, { Type2Type<GEMINI::OnBehalfOfSubID>(), "OnBehalfOfSubID", 116 } },
   { 117, { Type2Type<GEMINI::QuoteID>(), "QuoteID", 117 } },
   { 118, { Type2Type<GEMINI::NetMoney>(), "NetMoney", 118 } },
   { 119, { Type2Type<GEMINI::SettlCurrAmt>(), "SettlCurrAmt", 119 } },
   { 120, { Type2Type<GEMINI::SettlCurrency>(), "SettlCurrency", 120 } },
   { 121, { Type2Type<GEMINI::ForexReq>(), "ForexReq", 121 } },
   { 122, { Type2Type<GEMINI::OrigSendingTime>(), "OrigSendingTime", 122 } },
   { 123, { Type2Type<GEMINI::GapFillFlag>(), "GapFillFlag", 123 } },
   { 124, { Type2Type<GEMINI::NoExecs>(), "NoExecs", 124 } },
   { 126, { Type2Type<GEMINI::ExpireTime>(), "ExpireTime", 126 } },
   { 127, { Type2Type<GEMINI::DKReason, char>(), "DKReason", 127, &GEMINI::realmbases[27] } },
   { 128, { Type2Type<GEMINI::DeliverToCompID>(), "DeliverToCompID", 128 } },
   { 129, { Type2Type<GEMINI::DeliverToSubID>(), "DeliverToSubID", 129 } },
   { 130, { Type2Type<GEMINI::IOINaturalFlag>(), "IOINaturalFlag", 130 } },
   { 131, { Type2Type<GEMINI::QuoteReqID>(), "QuoteReqID", 131 } },
   { 132, { Type2Type<GEMINI::BidPx>(), "BidPx", 132 } },
   { 133, { Type2Type<GEMINI::OfferPx>(), "OfferPx", 133 } },
   { 134, { Type2Type<GEMINI::BidSize>(), "BidSize", 134 } },
   { 135, { Type2Type<GEMINI::OfferSize>(), "OfferSize", 135 } },
   { 136, { Type2Type<GEMINI::NoMiscFees>(), "NoMiscFees", 136 } },
   { 137, { Type2Type<GEMINI::MiscFeeAmt>(), "MiscFeeAmt", 137 } },
   { 138, { Type2Type<GEMINI::MiscFeeCurr>(), "MiscFeeCurr", 138 } },
   { 139, { Type2Type<GEMINI::MiscFeeType, char>(), "MiscFeeType", 139, &GEMINI::realmbases[28] } },
   { 140, { Type2Type<GEMINI::PrevClosePx>(), "PrevClosePx", 140 } },
   { 141, { Type2Type<GEMINI::ResetSeqNumFlag>(), "ResetSeqNumFlag", 141 } },
   { 142, { Type2Type<GEMINI::SenderLocationID>(), "SenderLocationID", 142 } },
   { 143, { Type2Type<GEMINI::TargetLocationID>(), "TargetLocationID", 143 } },
   { 144, { Type2Type<GEMINI::OnBehalfOfLocationID>(), "OnBehalfOfLocationID", 144 } },
   { 145, { Type2Type<GEMINI::DeliverToLocationID>(), "DeliverToLocationID", 145 } },
   { 146, { Type2Type<GEMINI::NoRelatedSym>(), "NoRelatedSym", 146 } },
   { 147, { Type2Type<GEMINI::Subject>(), "Subject", 147 } },
   { 148, { Type2Type<GEMINI::Headline>(), "Headline", 148 } },
   { 149, { Type2Type<GEMINI::URLLink>(), "URLLink", 149 } },
   { 150, { Type2Type<GEMINI::ExecType, char>(), "ExecType", 150, &GEMINI::realmbases[29] } },
   { 151, { Type2Type<GEMINI::LeavesQty>(), "LeavesQty", 151 } },
   { 152, { Type2Type<GEMINI::CashOrderQty>(), "CashOrderQty", 152 } },
   { 153, { Type2Type<GEMINI::AllocAvgPx>(), "AllocAvgPx", 153 } },
   { 154, { Type2Type<GEMINI::AllocNetMoney>(), "AllocNetMoney", 154 } },
   { 155, { Type2Type<GEMINI::SettlCurrFxRate>(), "SettlCurrFxRate", 155 } },
   { 156, { Type2Type<GEMINI::SettlCurrFxRateCalc, char>(), "SettlCurrFxRateCalc", 156, &GEMINI::realmbases[30] } },
   { 157, { Type2Type<GEMINI::NumDaysInterest>(), "NumDaysInterest", 157 } },
   { 158, { Type2Type<GEMINI::AccruedInterestRate>(), "AccruedInterestRate", 158 } },
   { 159, { Type2Type<GEMINI::AccruedInterestAmt>(), "AccruedInterestAmt", 159 } },
   { 160, { Type2Type<GEMINI::SettlInstMode, char>(), "SettlInstMode", 160, &GEMINI::realmbases[31] } },
   { 161, { Type2Type<GEMINI::AllocText>(), "AllocText", 161 } },
   { 162, { Type2Type<GEMINI::SettlInstID>(), "SettlInstID", 162 } },
   { 163, { Type2Type<GEMINI::SettlInstTransType, char>(), "SettlInstTransType", 163, &GEMINI::realmbases[32] } },
   { 164, { Type2Type<GEMINI::EmailThreadID>(), "EmailThreadID", 164 } },
   { 165, { Type2Type<GEMINI::SettlInstSource, char>(), "SettlInstSource", 165, &GEMINI::realmbases[33] } },
   { 167, { Type2Type<GEMINI::SecurityType, f8String>(), "SecurityType", 167, &GEMINI::realmbases[34] } },
   { 168, { Type2Type<GEMINI::EffectiveTime>(), "EffectiveTime", 168 } },
   { 169, { Type2Type<GEMINI::StandInstDbType, int>(), "StandInstDbType", 169, &GEMINI::realmbases[35] } },
   { 170, { Type2Type<GEMINI::StandInstDbName>(), "StandInstDbName", 170 } },
   { 171, { Type2Type<GEMINI::StandInstDbID>(), "StandInstDbID", 171 } },
   { 172, { Type2Type<GEMINI::SettlDeliveryType, int>(), "SettlDeliveryType", 172, &GEMINI::realmbases[36] } },
   { 188, { Type2Type<GEMINI::BidSpotRate>(), "BidSpotRate", 188 } },
   { 189, { Type2Type<GEMINI::BidForwardPoints>(), "BidForwardPoints", 189 } },
   { 190, { Type2Type<GEMINI::OfferSpotRate>(), "OfferSpotRate", 190 } },
   { 191, { Type2Type<GEMINI::OfferForwardPoints>(), "OfferForwardPoints", 191 } },
   { 192, { Type2Type<GEMINI::OrderQty2>(), "OrderQty2", 192 } },
   { 193, { Type2Type<GEMINI::SettlDate2>(), "SettlDate2", 193 } },
   { 194, { Type2Type<GEMINI::LastSpotRate>(), "LastSpotRate", 194 } },
   { 195, { Type2Type<GEMINI::LastForwardPoints>(), "LastForwardPoints", 195 } },
   { 196, { Type2Type<GEMINI::AllocLinkID>(), "AllocLinkID", 196 } },
   { 197, { Type2Type<GEMINI::AllocLinkType, int>(), "AllocLinkType", 197, &GEMINI::realmbases[37] } },
   { 198, { Type2Type<GEMINI::SecondaryOrderID>(), "SecondaryOrderID", 198 } },
   { 199, { Type2Type<GEMINI::NoIOIQualifiers>(), "NoIOIQualifiers", 199 } },
   { 200, { Type2Type<GEMINI::MaturityMonthYear>(), "MaturityMonthYear", 200 } },
   { 201, { Type2Type<GEMINI::PutOrCall, int>(), "PutOrCall", 201, &GEMINI::realmbases[38] } },
   { 202, { Type2Type<GEMINI::StrikePrice>(), "StrikePrice", 202 } },
   { 203, { Type2Type<GEMINI::CoveredOrUncovered, int>(), "CoveredOrUncovered", 203, &GEMINI::realmbases[39] } },
   { 206, { Type2Type<GEMINI::OptAttribute>(), "OptAttribute", 206 } },
   { 207, { Type2Type<GEMINI::SecurityExchange>(), "SecurityExchange", 207 } },
   { 208, { Type2Type<GEMINI::NotifyBrokerOfCredit>(), "NotifyBrokerOfCredit", 208 } },
   { 209, { Type2Type<GEMINI::AllocHandlInst, int>(), "AllocHandlInst", 209, &GEMINI::realmbases[40] } },
   { 210, { Type2Type<GEMINI::MaxShow>(), "MaxShow", 210 } },
   { 211, { Type2Type<GEMINI::PegOffsetValue>(), "PegOffsetValue", 211 } },
   { 212, { Type2Type<GEMINI::XmlDataLen>(), "XmlDataLen", 212 } },
   { 213, { Type2Type<GEMINI::XmlData>(), "XmlData", 213 } },
   { 214, { Type2Type<GEMINI::SettlInstRefID>(), "SettlInstRefID", 214 } },
   { 215, { Type2Type<GEMINI::NoRoutingIDs>(), "NoRoutingIDs", 215 } },
   { 216, { Type2Type<GEMINI::RoutingType, int>(), "RoutingType", 216, &GEMINI::realmbases[41] } },
   { 217, { Type2Type<GEMINI::RoutingID>(), "RoutingID", 217 } },
   { 218, { Type2Type<GEMINI::Spread>(), "Spread", 218 } },
   { 220, { Type2Type<GEMINI::BenchmarkCurveCurrency>(), "BenchmarkCurveCurrency", 220 } },
   { 221, { Type2Type<GEMINI::BenchmarkCurveName, f8String>(), "BenchmarkCurveName", 221, &GEMINI::realmbases[42] } },
   { 222, { Type2Type<GEMINI::BenchmarkCurvePoint>(), "BenchmarkCurvePoint", 222 } },
   { 223, { Type2Type<GEMINI::CouponRate>(), "CouponRate", 223 } },
   { 224, { Type2Type<GEMINI::CouponPaymentDate>(), "CouponPaymentDate", 224 } },
   { 225, { Type2Type<GEMINI::IssueDate>(), "IssueDate", 225 } },
   { 226, { Type2Type<GEMINI::RepurchaseTerm>(), "RepurchaseTerm", 226 } },
   { 227, { Type2Type<GEMINI::RepurchaseRate>(), "RepurchaseRate", 227 } },
   { 228, { Type2Type<GEMINI::Factor>(), "Factor", 228 } },
   { 229, { Type2Type<GEMINI::TradeOriginationDate>(), "TradeOriginationDate", 229 } },
   { 230, { Type2Type<GEMINI::ExDate>(), "ExDate", 230 } },
   { 231, { Type2Type<GEMINI::ContractMultiplier>(), "ContractMultiplier", 231 } },
   { 232, { Type2Type<GEMINI::NoStipulations>(), "NoStipulations", 232 } },
   { 233, { Type2Type<GEMINI::StipulationType, f8String>(), "StipulationType", 233, &GEMINI::realmbases[43] } },
   { 234, { Type2Type<GEMINI::StipulationValue, f8String>(), "StipulationValue", 234, &GEMINI::realmbases[44] } },
   { 235, { Type2Type<GEMINI::YieldType, f8String>(), "YieldType", 235, &GEMINI::realmbases[45] } },
   { 236, { Type2Type<GEMINI::Yield>(), "Yield", 236 } },
   { 237, { Type2Type<GEMINI::TotalTakedown>(), "TotalTakedown", 237 } },
   { 238, { Type2Type<GEMINI::Concession>(), "Concession", 238 } },
   { 239, { Type2Type<GEMINI::RepoCollateralSecurityType>(), "RepoCollateralSecurityType", 239 } },
   { 240, { Type2Type<GEMINI::RedemptionDate>(), "RedemptionDate", 240 } },
   { 241, { Type2Type<GEMINI::UnderlyingCouponPaymentDate>(), "UnderlyingCouponPaymentDate", 241 } },
   { 242, { Type2Type<GEMINI::UnderlyingIssueDate>(), "UnderlyingIssueDate", 242 } },
   { 243, { Type2Type<GEMINI::UnderlyingRepoCollateralSecurityType>(), "UnderlyingRepoCollateralSecurityType", 243 } },
   { 244, { Type2Type<GEMINI::UnderlyingRepurchaseTerm>(), "UnderlyingRepurchaseTerm", 244 } },
   { 245, { Type2Type<GEMINI::UnderlyingRepurchaseRate>(), "UnderlyingRepurchaseRate", 245 } },
   { 246, { Type2Type<GEMINI::UnderlyingFactor>(), "UnderlyingFactor", 246 } },
   { 247, { Type2Type<GEMINI::UnderlyingRedemptionDate>(), "UnderlyingRedemptionDate", 247 } },
   { 248, { Type2Type<GEMINI::LegCouponPaymentDate>(), "LegCouponPaymentDate", 248 } },
   { 249, { Type2Type<GEMINI::LegIssueDate>(), "LegIssueDate", 249 } },
   { 250, { Type2Type<GEMINI::LegRepoCollateralSecurityType>(), "LegRepoCollateralSecurityType", 250 } },
   { 251, { Type2Type<GEMINI::LegRepurchaseTerm>(), "LegRepurchaseTerm", 251 } },
   { 252, { Type2Type<GEMINI::LegRepurchaseRate>(), "LegRepurchaseRate", 252 } },
   { 253, { Type2Type<GEMINI::LegFactor>(), "LegFactor", 253 } },
   { 254, { Type2Type<GEMINI::LegRedemptionDate>(), "LegRedemptionDate", 254 } },
   { 255, { Type2Type<GEMINI::CreditRating>(), "CreditRating", 255 } },
   { 256, { Type2Type<GEMINI::UnderlyingCreditRating>(), "UnderlyingCreditRating", 256 } },
   { 257, { Type2Type<GEMINI::LegCreditRating>(), "LegCreditRating", 257 } },
   { 258, { Type2Type<GEMINI::TradedFlatSwitch>(), "TradedFlatSwitch", 258 } },
   { 259, { Type2Type<GEMINI::BasisFeatureDate>(), "BasisFeatureDate", 259 } },
   { 260, { Type2Type<GEMINI::BasisFeaturePrice>(), "BasisFeaturePrice", 260 } },
   { 262, { Type2Type<GEMINI::MDReqID>(), "MDReqID", 262 } },
   { 263, { Type2Type<GEMINI::SubscriptionRequestType, char>(), "SubscriptionRequestType", 263, &GEMINI::realmbases[46] } },
   { 264, { Type2Type<GEMINI::MarketDepth, int>(), "MarketDepth", 264, &GEMINI::realmbases[47] } },
   { 265, { Type2Type<GEMINI::MDUpdateType, int>(), "MDUpdateType", 265, &GEMINI::realmbases[48] } },
   { 266, { Type2Type<GEMINI::AggregatedBook>(), "AggregatedBook", 266 } },
   { 267, { Type2Type<GEMINI::NoMDEntryTypes>(), "NoMDEntryTypes", 267 } },
   { 268, { Type2Type<GEMINI::NoMDEntries>(), "NoMDEntries", 268 } },
   { 269, { Type2Type<GEMINI::MDEntryType, char>(), "MDEntryType", 269, &GEMINI::realmbases[49] } },
   { 270, { Type2Type<GEMINI::MDEntryPx>(), "MDEntryPx", 270 } },
   { 271, { Type2Type<GEMINI::MDEntrySize>(), "MDEntrySize", 271 } },
   { 272, { Type2Type<GEMINI::MDEntryDate>(), "MDEntryDate", 272 } },
   { 273, { Type2Type<GEMINI::MDEntryTime>(), "MDEntryTime", 273 } },
   { 274, { Type2Type<GEMINI::TickDirection, char>(), "TickDirection", 274, &GEMINI::realmbases[50] } },
   { 275, { Type2Type<GEMINI::MDMkt>(), "MDMkt", 275 } },
   { 276, { Type2Type<GEMINI::QuoteCondition, f8String>(), "QuoteCondition", 276, &GEMINI::realmbases[51] } },
   { 277, { Type2Type<GEMINI::TradeCondition, f8String>(), "TradeCondition", 277, &GEMINI::realmbases[52] } },
   { 278, { Type2Type<GEMINI::MDEntryID>(), "MDEntryID", 278 } },
   { 279, { Type2Type<GEMINI::MDUpdateAction, char>(), "MDUpdateAction", 279, &GEMINI::realmbases[53] } },
   { 280, { Type2Type<GEMINI::MDEntryRefID>(), "MDEntryRefID", 280 } },
   { 281, { Type2Type<GEMINI::MDReqRejReason, char>(), "MDReqRejReason", 281, &GEMINI::realmbases[54] } },
   { 282, { Type2Type<GEMINI::MDEntryOriginator>(), "MDEntryOriginator", 282 } },
   { 283, { Type2Type<GEMINI::LocationID>(), "LocationID", 283 } },
   { 284, { Type2Type<GEMINI::DeskID>(), "DeskID", 284 } },
   { 285, { Type2Type<GEMINI::DeleteReason, char>(), "DeleteReason", 285, &GEMINI::realmbases[55] } },
   { 286, { Type2Type<GEMINI::OpenCloseSettlFlag, f8String>(), "OpenCloseSettlFlag", 286, &GEMINI::realmbases[56] } },
   { 287, { Type2Type<GEMINI::SellerDays>(), "SellerDays", 287 } },
   { 288, { Type2Type<GEMINI::MDEntryBuyer>(), "MDEntryBuyer", 288 } },
   { 289, { Type2Type<GEMINI::MDEntrySeller>(), "MDEntrySeller", 289 } },
   { 290, { Type2Type<GEMINI::MDEntryPositionNo>(), "MDEntryPositionNo", 290 } },
   { 291, { Type2Type<GEMINI::FinancialStatus, f8String>(), "FinancialStatus", 291, &GEMINI::realmbases[57] } },
   { 292, { Type2Type<GEMINI::CorporateAction, f8String>(), "CorporateAction", 292, &GEMINI::realmbases[58] } },
   { 293, { Type2Type<GEMINI::DefBidSize>(), "DefBidSize", 293 } },
   { 294, { Type2Type<GEMINI::DefOfferSize>(), "DefOfferSize", 294 } },
   { 295, { Type2Type<GEMINI::NoQuoteEntries>(), "NoQuoteEntries", 295 } },
   { 296, { Type2Type<GEMINI::NoQuoteSets>(), "NoQuoteSets", 296 } },
   { 297, { Type2Type<GEMINI::QuoteStatus, int>(), "QuoteStatus", 297, &GEMINI::realmbases[59] } },
   { 298, { Type2Type<GEMINI::QuoteCancelType, int>(), "QuoteCancelType", 298, &GEMINI::realmbases[60] } },
   { 299, { Type2Type<GEMINI::QuoteEntryID>(), "QuoteEntryID", 299 } },
   { 300, { Type2Type<GEMINI::QuoteRejectReason, int>(), "QuoteRejectReason", 300, &GEMINI::realmbases[61] } },
   { 301, { Type2Type<GEMINI::QuoteResponseLevel, int>(), "QuoteResponseLevel", 301, &GEMINI::realmbases[62] } },
   { 302, { Type2Type<GEMINI::QuoteSetID>(), "QuoteSetID", 302 } },
   { 303, { Type2Type<GEMINI::QuoteRequestType, int>(), "QuoteRequestType", 303, &GEMINI::realmbases[63] } },
   { 304, { Type2Type<GEMINI::TotNoQuoteEntries>(), "TotNoQuoteEntries", 304 } },
   { 305, { Type2Type<GEMINI::UnderlyingSecurityIDSource>(), "UnderlyingSecurityIDSource", 305 } },
   { 306, { Type2Type<GEMINI::UnderlyingIssuer>(), "UnderlyingIssuer", 306 } },
   { 307, { Type2Type<GEMINI::UnderlyingSecurityDesc>(), "UnderlyingSecurityDesc", 307 } },
   { 308, { Type2Type<GEMINI::UnderlyingSecurityExchange>(), "UnderlyingSecurityExchange", 308 } },
   { 309, { Type2Type<GEMINI::UnderlyingSecurityID>(), "UnderlyingSecurityID", 309 } },
   { 310, { Type2Type<GEMINI::UnderlyingSecurityType>(), "UnderlyingSecurityType", 310 } },
   { 311, { Type2Type<GEMINI::UnderlyingSymbol>(), "UnderlyingSymbol", 311 } },
   { 312, { Type2Type<GEMINI::UnderlyingSymbolSfx>(), "UnderlyingSymbolSfx", 312 } },
   { 313, { Type2Type<GEMINI::UnderlyingMaturityMonthYear>(), "UnderlyingMaturityMonthYear", 313 } },
   { 315, { Type2Type<GEMINI::UnderlyingPutOrCall, int>(), "UnderlyingPutOrCall", 315, &GEMINI::realmbases[64] } },
   { 316, { Type2Type<GEMINI::UnderlyingStrikePrice>(), "UnderlyingStrikePrice", 316 } },
   { 317, { Type2Type<GEMINI::UnderlyingOptAttribute>(), "UnderlyingOptAttribute", 317 } },
   { 318, { Type2Type<GEMINI::UnderlyingCurrency>(), "UnderlyingCurrency", 318 } },
   { 320, { Type2Type<GEMINI::SecurityReqID>(), "SecurityReqID", 320 } },
   { 321, { Type2Type<GEMINI::SecurityRequestType, int>(), "SecurityRequestType", 321, &GEMINI::realmbases[65] } },
   { 322, { Type2Type<GEMINI::SecurityResponseID>(), "SecurityResponseID", 322 } },
   { 323, { Type2Type<GEMINI::SecurityResponseType, int>(), "SecurityResponseType", 323, &GEMINI::realmbases[66] } },
   { 324, { Type2Type<GEMINI::SecurityStatusReqID>(), "SecurityStatusReqID", 324 } },
   { 325, { Type2Type<GEMINI::UnsolicitedIndicator>(), "UnsolicitedIndicator", 325 } },
   { 326, { Type2Type<GEMINI::SecurityTradingStatus, int>(), "SecurityTradingStatus", 326, &GEMINI::realmbases[67] } },
   { 327, { Type2Type<GEMINI::HaltReason, char>(), "HaltReason", 327, &GEMINI::realmbases[68] } },
   { 328, { Type2Type<GEMINI::InViewOfCommon>(), "InViewOfCommon", 328 } },
   { 329, { Type2Type<GEMINI::DueToRelated>(), "DueToRelated", 329 } },
   { 330, { Type2Type<GEMINI::BuyVolume>(), "BuyVolume", 330 } },
   { 331, { Type2Type<GEMINI::SellVolume>(), "SellVolume", 331 } },
   { 332, { Type2Type<GEMINI::HighPx>(), "HighPx", 332 } },
   { 333, { Type2Type<GEMINI::LowPx>(), "LowPx", 333 } },
   { 334, { Type2Type<GEMINI::Adjustment, int>(), "Adjustment", 334, &GEMINI::realmbases[69] } },
   { 335, { Type2Type<GEMINI::TradSesReqID>(), "TradSesReqID", 335 } },
   { 336, { Type2Type<GEMINI::TradingSessionID>(), "TradingSessionID", 336 } },
   { 337, { Type2Type<GEMINI::ContraTrader>(), "ContraTrader", 337 } },
   { 338, { Type2Type<GEMINI::TradSesMethod, int>(), "TradSesMethod", 338, &GEMINI::realmbases[70] } },
   { 339, { Type2Type<GEMINI::TradSesMode, int>(), "TradSesMode", 339, &GEMINI::realmbases[71] } },
   { 340, { Type2Type<GEMINI::TradSesStatus, int>(), "TradSesStatus", 340, &GEMINI::realmbases[72] } },
   { 341, { Type2Type<GEMINI::TradSesStartTime>(), "TradSesStartTime", 341 } },
   { 342, { Type2Type<GEMINI::TradSesOpenTime>(), "TradSesOpenTime", 342 } },
   { 343, { Type2Type<GEMINI::TradSesPreCloseTime>(), "TradSesPreCloseTime", 343 } },
   { 344, { Type2Type<GEMINI::TradSesCloseTime>(), "TradSesCloseTime", 344 } },
   { 345, { Type2Type<GEMINI::TradSesEndTime>(), "TradSesEndTime", 345 } },
   { 346, { Type2Type<GEMINI::NumberOfOrders>(), "NumberOfOrders", 346 } },
   { 347, { Type2Type<GEMINI::MessageEncoding, f8String>(), "MessageEncoding", 347, &GEMINI::realmbases[73] } },
   { 348, { Type2Type<GEMINI::EncodedIssuerLen>(), "EncodedIssuerLen", 348 } },
   { 349, { Type2Type<GEMINI::EncodedIssuer>(), "EncodedIssuer", 349 } },
   { 350, { Type2Type<GEMINI::EncodedSecurityDescLen>(), "EncodedSecurityDescLen", 350 } },
   { 351, { Type2Type<GEMINI::EncodedSecurityDesc>(), "EncodedSecurityDesc", 351 } },
   { 352, { Type2Type<GEMINI::EncodedListExecInstLen>(), "EncodedListExecInstLen", 352 } },
   { 353, { Type2Type<GEMINI::EncodedListExecInst>(), "EncodedListExecInst", 353 } },
   { 354, { Type2Type<GEMINI::EncodedTextLen>(), "EncodedTextLen", 354 } },
   { 355, { Type2Type<GEMINI::EncodedText>(), "EncodedText", 355 } },
   { 356, { Type2Type<GEMINI::EncodedSubjectLen>(), "EncodedSubjectLen", 356 } },
   { 357, { Type2Type<GEMINI::EncodedSubject>(), "EncodedSubject", 357 } },
   { 358, { Type2Type<GEMINI::EncodedHeadlineLen>(), "EncodedHeadlineLen", 358 } },
   { 359, { Type2Type<GEMINI::EncodedHeadline>(), "EncodedHeadline", 359 } },
   { 360, { Type2Type<GEMINI::EncodedAllocTextLen>(), "EncodedAllocTextLen", 360 } },
   { 361, { Type2Type<GEMINI::EncodedAllocText>(), "EncodedAllocText", 361 } },
   { 362, { Type2Type<GEMINI::EncodedUnderlyingIssuerLen>(), "EncodedUnderlyingIssuerLen", 362 } },
   { 363, { Type2Type<GEMINI::EncodedUnderlyingIssuer>(), "EncodedUnderlyingIssuer", 363 } },
   { 364, { Type2Type<GEMINI::EncodedUnderlyingSecurityDescLen>(), "EncodedUnderlyingSecurityDescLen", 364 } },
   { 365, { Type2Type<GEMINI::EncodedUnderlyingSecurityDesc>(), "EncodedUnderlyingSecurityDesc", 365 } },
   { 366, { Type2Type<GEMINI::AllocPrice>(), "AllocPrice", 366 } },
   { 367, { Type2Type<GEMINI::QuoteSetValidUntilTime>(), "QuoteSetValidUntilTime", 367 } },
   { 368, { Type2Type<GEMINI::QuoteEntryRejectReason, int>(), "QuoteEntryRejectReason", 368, &GEMINI::realmbases[74] } },
   { 369, { Type2Type<GEMINI::LastMsgSeqNumProcessed>(), "LastMsgSeqNumProcessed", 369 } },
   { 371, { Type2Type<GEMINI::RefTagID>(), "RefTagID", 371 } },
   { 372, { Type2Type<GEMINI::RefMsgType>(), "RefMsgType", 372 } },
   { 373, { Type2Type<GEMINI::SessionRejectReason, int>(), "SessionRejectReason", 373, &GEMINI::realmbases[75] } },
   { 374, { Type2Type<GEMINI::BidRequestTransType, char>(), "BidRequestTransType", 374, &GEMINI::realmbases[76] } },
   { 375, { Type2Type<GEMINI::ContraBroker>(), "ContraBroker", 375 } },
   { 376, { Type2Type<GEMINI::ComplianceID>(), "ComplianceID", 376 } },
   { 377, { Type2Type<GEMINI::SolicitedFlag>(), "SolicitedFlag", 377 } },
   { 378, { Type2Type<GEMINI::ExecRestatementReason, int>(), "ExecRestatementReason", 378, &GEMINI::realmbases[77] } },
   { 379, { Type2Type<GEMINI::BusinessRejectRefID>(), "BusinessRejectRefID", 379 } },
   { 380, { Type2Type<GEMINI::BusinessRejectReason, int>(), "BusinessRejectReason", 380, &GEMINI::realmbases[78] } },
   { 381, { Type2Type<GEMINI::GrossTradeAmt>(), "GrossTradeAmt", 381 } },
   { 382, { Type2Type<GEMINI::NoContraBrokers>(), "NoContraBrokers", 382 } },
   { 383, { Type2Type<GEMINI::MaxMessageSize>(), "MaxMessageSize", 383 } },
   { 384, { Type2Type<GEMINI::NoMsgTypes>(), "NoMsgTypes", 384 } },
   { 385, { Type2Type<GEMINI::MsgDirection, char>(), "MsgDirection", 385, &GEMINI::realmbases[79] } },
   { 386, { Type2Type<GEMINI::NoTradingSessions>(), "NoTradingSessions", 386 } },
   { 387, { Type2Type<GEMINI::TotalVolumeTraded>(), "TotalVolumeTraded", 387 } },
   { 388, { Type2Type<GEMINI::DiscretionInst, char>(), "DiscretionInst", 388, &GEMINI::realmbases[80] } },
   { 389, { Type2Type<GEMINI::DiscretionOffsetValue>(), "DiscretionOffsetValue", 389 } },
   { 390, { Type2Type<GEMINI::BidID>(), "BidID", 390 } },
   { 391, { Type2Type<GEMINI::ClientBidID>(), "ClientBidID", 391 } },
   { 392, { Type2Type<GEMINI::ListName>(), "ListName", 392 } },
   { 393, { Type2Type<GEMINI::TotNoRelatedSym>(), "TotNoRelatedSym", 393 } },
   { 394, { Type2Type<GEMINI::BidType, int>(), "BidType", 394, &GEMINI::realmbases[81] } },
   { 395, { Type2Type<GEMINI::NumTickets>(), "NumTickets", 395 } },
   { 396, { Type2Type<GEMINI::SideValue1>(), "SideValue1", 396 } },
   { 397, { Type2Type<GEMINI::SideValue2>(), "SideValue2", 397 } },
   { 398, { Type2Type<GEMINI::NoBidDescriptors>(), "NoBidDescriptors", 398 } },
   { 399, { Type2Type<GEMINI::BidDescriptorType, int>(), "BidDescriptorType", 399, &GEMINI::realmbases[82] } },
   { 400, { Type2Type<GEMINI::BidDescriptor>(), "BidDescriptor", 400 } },
   { 401, { Type2Type<GEMINI::SideValueInd, int>(), "SideValueInd", 401, &GEMINI::realmbases[83] } },
   { 402, { Type2Type<GEMINI::LiquidityPctLow>(), "LiquidityPctLow", 402 } },
   { 403, { Type2Type<GEMINI::LiquidityPctHigh>(), "LiquidityPctHigh", 403 } },
   { 404, { Type2Type<GEMINI::LiquidityValue>(), "LiquidityValue", 404 } },
   { 405, { Type2Type<GEMINI::EFPTrackingError>(), "EFPTrackingError", 405 } },
   { 406, { Type2Type<GEMINI::FairValue>(), "FairValue", 406 } },
   { 407, { Type2Type<GEMINI::OutsideIndexPct>(), "OutsideIndexPct", 407 } },
   { 408, { Type2Type<GEMINI::ValueOfFutures>(), "ValueOfFutures", 408 } },
   { 409, { Type2Type<GEMINI::LiquidityIndType, int>(), "LiquidityIndType", 409, &GEMINI::realmbases[84] } },
   { 410, { Type2Type<GEMINI::WtAverageLiquidity>(), "WtAverageLiquidity", 410 } },
   { 411, { Type2Type<GEMINI::ExchangeForPhysical>(), "ExchangeForPhysical", 411 } },
   { 412, { Type2Type<GEMINI::OutMainCntryUIndex>(), "OutMainCntryUIndex", 412 } },
   { 413, { Type2Type<GEMINI::CrossPercent>(), "CrossPercent", 413 } },
   { 414, { Type2Type<GEMINI::ProgRptReqs, int>(), "ProgRptReqs", 414, &GEMINI::realmbases[85] } },
   { 415, { Type2Type<GEMINI::ProgPeriodInterval>(), "ProgPeriodInterval", 415 } },
   { 416, { Type2Type<GEMINI::IncTaxInd, int>(), "IncTaxInd", 416, &GEMINI::realmbases[86] } },
   { 417, { Type2Type<GEMINI::NumBidders>(), "NumBidders", 417 } },
   { 418, { Type2Type<GEMINI::BidTradeType, char>(), "BidTradeType", 418, &GEMINI::realmbases[87] } },
   { 419, { Type2Type<GEMINI::BasisPxType, char>(), "BasisPxType", 419, &GEMINI::realmbases[88] } },
   { 420, { Type2Type<GEMINI::NoBidComponents>(), "NoBidComponents", 420 } },
   { 421, { Type2Type<GEMINI::Country>(), "Country", 421 } },
   { 422, { Type2Type<GEMINI::TotNoStrikes>(), "TotNoStrikes", 422 } },
   { 423, { Type2Type<GEMINI::PriceType, int>(), "PriceType", 423, &GEMINI::realmbases[89] } },
   { 424, { Type2Type<GEMINI::DayOrderQty>(), "DayOrderQty", 424 } },
   { 425, { Type2Type<GEMINI::DayCumQty>(), "DayCumQty", 425 } },
   { 426, { Type2Type<GEMINI::DayAvgPx>(), "DayAvgPx", 426 } },
   { 427, { Type2Type<GEMINI::GTBookingInst, int>(), "GTBookingInst", 427, &GEMINI::realmbases[90] } },
   { 428, { Type2Type<GEMINI::NoStrikes>(), "NoStrikes", 428 } },
   { 429, { Type2Type<GEMINI::ListStatusType, int>(), "ListStatusType", 429, &GEMINI::realmbases[91] } },
   { 430, { Type2Type<GEMINI::NetGrossInd, int>(), "NetGrossInd", 430, &GEMINI::realmbases[92] } },
   { 431, { Type2Type<GEMINI::ListOrderStatus, int>(), "ListOrderStatus", 431, &GEMINI::realmbases[93] } },
   { 432, { Type2Type<GEMINI::ExpireDate>(), "ExpireDate", 432 } },
   { 433, { Type2Type<GEMINI::ListExecInstType, char>(), "ListExecInstType", 433, &GEMINI::realmbases[94] } },
   { 434, { Type2Type<GEMINI::CxlRejResponseTo, char>(), "CxlRejResponseTo", 434, &GEMINI::realmbases[95] } },
   { 435, { Type2Type<GEMINI::UnderlyingCouponRate>(), "UnderlyingCouponRate", 435 } },
   { 436, { Type2Type<GEMINI::UnderlyingContractMultiplier>(), "UnderlyingContractMultiplier", 436 } },
   { 437, { Type2Type<GEMINI::ContraTradeQty>(), "ContraTradeQty", 437 } },
   { 438, { Type2Type<GEMINI::ContraTradeTime>(), "ContraTradeTime", 438 } },
   { 441, { Type2Type<GEMINI::LiquidityNumSecurities>(), "LiquidityNumSecurities", 441 } },
   { 442, { Type2Type<GEMINI::MultiLegReportingType, char>(), "MultiLegReportingType", 442, &GEMINI::realmbases[96] } },
   { 443, { Type2Type<GEMINI::StrikeTime>(), "StrikeTime", 443 } },
   { 444, { Type2Type<GEMINI::ListStatusText>(), "ListStatusText", 444 } },
   { 445, { Type2Type<GEMINI::EncodedListStatusTextLen>(), "EncodedListStatusTextLen", 445 } },
   { 446, { Type2Type<GEMINI::EncodedListStatusText>(), "EncodedListStatusText", 446 } },
   { 447, { Type2Type<GEMINI::PartyIDSource, char>(), "PartyIDSource", 447, &GEMINI::realmbases[97] } },
   { 448, { Type2Type<GEMINI::PartyID>(), "PartyID", 448 } },
   { 451, { Type2Type<GEMINI::NetChgPrevDay>(), "NetChgPrevDay", 451 } },
   { 452, { Type2Type<GEMINI::PartyRole, int>(), "PartyRole", 452, &GEMINI::realmbases[98] } },
   { 453, { Type2Type<GEMINI::NoPartyIDs>(), "NoPartyIDs", 453 } },
   { 454, { Type2Type<GEMINI::NoSecurityAltID>(), "NoSecurityAltID", 454 } },
   { 455, { Type2Type<GEMINI::SecurityAltID>(), "SecurityAltID", 455 } },
   { 456, { Type2Type<GEMINI::SecurityAltIDSource>(), "SecurityAltIDSource", 456 } },
   { 457, { Type2Type<GEMINI::NoUnderlyingSecurityAltID>(), "NoUnderlyingSecurityAltID", 457 } },
   { 458, { Type2Type<GEMINI::UnderlyingSecurityAltID>(), "UnderlyingSecurityAltID", 458 } },
   { 459, { Type2Type<GEMINI::UnderlyingSecurityAltIDSource>(), "UnderlyingSecurityAltIDSource", 459 } },
   { 460, { Type2Type<GEMINI::Product, int>(), "Product", 460, &GEMINI::realmbases[99] } },
   { 461, { Type2Type<GEMINI::CFICode>(), "CFICode", 461 } },
   { 462, { Type2Type<GEMINI::UnderlyingProduct>(), "UnderlyingProduct", 462 } },
   { 463, { Type2Type<GEMINI::UnderlyingCFICode>(), "UnderlyingCFICode", 463 } },
   { 464, { Type2Type<GEMINI::TestMessageIndicator>(), "TestMessageIndicator", 464 } },
   { 466, { Type2Type<GEMINI::BookingRefID>(), "BookingRefID", 466 } },
   { 467, { Type2Type<GEMINI::IndividualAllocID>(), "IndividualAllocID", 467 } },
   { 468, { Type2Type<GEMINI::RoundingDirection, char>(), "RoundingDirection", 468, &GEMINI::realmbases[100] } },
   { 469, { Type2Type<GEMINI::RoundingModulus>(), "RoundingModulus", 469 } },
   { 470, { Type2Type<GEMINI::CountryOfIssue>(), "CountryOfIssue", 470 } },
   { 471, { Type2Type<GEMINI::StateOrProvinceOfIssue>(), "StateOrProvinceOfIssue", 471 } },
   { 472, { Type2Type<GEMINI::LocaleOfIssue>(), "LocaleOfIssue", 472 } },
   { 473, { Type2Type<GEMINI::NoRegistDtls>(), "NoRegistDtls", 473 } },
   { 474, { Type2Type<GEMINI::MailingDtls>(), "MailingDtls", 474 } },
   { 475, { Type2Type<GEMINI::InvestorCountryOfResidence>(), "InvestorCountryOfResidence", 475 } },
   { 476, { Type2Type<GEMINI::PaymentRef>(), "PaymentRef", 476 } },
   { 477, { Type2Type<GEMINI::DistribPaymentMethod, int>(), "DistribPaymentMethod", 477, &GEMINI::realmbases[101] } },
   { 478, { Type2Type<GEMINI::CashDistribCurr>(), "CashDistribCurr", 478 } },
   { 479, { Type2Type<GEMINI::CommCurrency>(), "CommCurrency", 479 } },
   { 480, { Type2Type<GEMINI::CancellationRights, char>(), "CancellationRights", 480, &GEMINI::realmbases[102] } },
   { 481, { Type2Type<GEMINI::MoneyLaunderingStatus, char>(), "MoneyLaunderingStatus", 481, &GEMINI::realmbases[103] } },
   { 482, { Type2Type<GEMINI::MailingInst>(), "MailingInst", 482 } },
   { 483, { Type2Type<GEMINI::TransBkdTime>(), "TransBkdTime", 483 } },
   { 484, { Type2Type<GEMINI::ExecPriceType, char>(), "ExecPriceType", 484, &GEMINI::realmbases[104] } },
   { 485, { Type2Type<GEMINI::ExecPriceAdjustment>(), "ExecPriceAdjustment", 485 } },
   { 486, { Type2Type<GEMINI::DateOfBirth>(), "DateOfBirth", 486 } },
   { 487, { Type2Type<GEMINI::TradeReportTransType, int>(), "TradeReportTransType", 487, &GEMINI::realmbases[105] } },
   { 488, { Type2Type<GEMINI::CardHolderName>(), "CardHolderName", 488 } },
   { 489, { Type2Type<GEMINI::CardNumber>(), "CardNumber", 489 } },
   { 490, { Type2Type<GEMINI::CardExpDate>(), "CardExpDate", 490 } },
   { 491, { Type2Type<GEMINI::CardIssNum>(), "CardIssNum", 491 } },
   { 492, { Type2Type<GEMINI::PaymentMethod, int>(), "PaymentMethod", 492, &GEMINI::realmbases[106] } },
   { 493, { Type2Type<GEMINI::RegistAcctType>(), "RegistAcctType", 493 } },
   { 494, { Type2Type<GEMINI::Designation>(), "Designation", 494 } },
   { 495, { Type2Type<GEMINI::TaxAdvantageType, int>(), "TaxAdvantageType", 495, &GEMINI::realmbases[107] } },
   { 496, { Type2Type<GEMINI::RegistRejReasonText>(), "RegistRejReasonText", 496 } },
   { 497, { Type2Type<GEMINI::FundRenewWaiv, char>(), "FundRenewWaiv", 497, &GEMINI::realmbases[108] } },
   { 498, { Type2Type<GEMINI::CashDistribAgentName>(), "CashDistribAgentName", 498 } },
   { 499, { Type2Type<GEMINI::CashDistribAgentCode>(), "CashDistribAgentCode", 499 } },
   { 500, { Type2Type<GEMINI::CashDistribAgentAcctNumber>(), "CashDistribAgentAcctNumber", 500 } },
   { 501, { Type2Type<GEMINI::CashDistribPayRef>(), "CashDistribPayRef", 501 } },
   { 502, { Type2Type<GEMINI::CashDistribAgentAcctName>(), "CashDistribAgentAcctName", 502 } },
   { 503, { Type2Type<GEMINI::CardStartDate>(), "CardStartDate", 503 } },
   { 504, { Type2Type<GEMINI::PaymentDate>(), "PaymentDate", 504 } },
   { 505, { Type2Type<GEMINI::PaymentRemitterID>(), "PaymentRemitterID", 505 } },
   { 506, { Type2Type<GEMINI::RegistStatus, char>(), "RegistStatus", 506, &GEMINI::realmbases[109] } },
   { 507, { Type2Type<GEMINI::RegistRejReasonCode, int>(), "RegistRejReasonCode", 507, &GEMINI::realmbases[110] } },
   { 508, { Type2Type<GEMINI::RegistRefID>(), "RegistRefID", 508 } },
   { 509, { Type2Type<GEMINI::RegistDtls>(), "RegistDtls", 509 } },
   { 510, { Type2Type<GEMINI::NoDistribInsts>(), "NoDistribInsts", 510 } },
   { 511, { Type2Type<GEMINI::RegistEmail>(), "RegistEmail", 511 } },
   { 512, { Type2Type<GEMINI::DistribPercentage>(), "DistribPercentage", 512 } },
   { 513, { Type2Type<GEMINI::RegistID>(), "RegistID", 513 } },
   { 514, { Type2Type<GEMINI::RegistTransType, char>(), "RegistTransType", 514, &GEMINI::realmbases[111] } },
   { 515, { Type2Type<GEMINI::ExecValuationPoint>(), "ExecValuationPoint", 515 } },
   { 516, { Type2Type<GEMINI::OrderPercent>(), "OrderPercent", 516 } },
   { 517, { Type2Type<GEMINI::OwnershipType, char>(), "OwnershipType", 517, &GEMINI::realmbases[112] } },
   { 518, { Type2Type<GEMINI::NoContAmts>(), "NoContAmts", 518 } },
   { 519, { Type2Type<GEMINI::ContAmtType, int>(), "ContAmtType", 519, &GEMINI::realmbases[113] } },
   { 520, { Type2Type<GEMINI::ContAmtValue>(), "ContAmtValue", 520 } },
   { 521, { Type2Type<GEMINI::ContAmtCurr>(), "ContAmtCurr", 521 } },
   { 522, { Type2Type<GEMINI::OwnerType, int>(), "OwnerType", 522, &GEMINI::realmbases[114] } },
   { 523, { Type2Type<GEMINI::PartySubID>(), "PartySubID", 523 } },
   { 524, { Type2Type<GEMINI::NestedPartyID>(), "NestedPartyID", 524 } },
   { 525, { Type2Type<GEMINI::NestedPartyIDSource>(), "NestedPartyIDSource", 525 } },
   { 526, { Type2Type<GEMINI::SecondaryClOrdID>(), "SecondaryClOrdID", 526 } },
   { 527, { Type2Type<GEMINI::SecondaryExecID>(), "SecondaryExecID", 527 } },
   { 528, { Type2Type<GEMINI::OrderCapacity, char>(), "OrderCapacity", 528, &GEMINI::realmbases[115] } },
   { 529, { Type2Type<GEMINI::OrderRestrictions, f8String>(), "OrderRestrictions", 529, &GEMINI::realmbases[116] } },
   { 530, { Type2Type<GEMINI::MassCancelRequestType, char>(), "MassCancelRequestType", 530, &GEMINI::realmbases[117] } },
   { 531, { Type2Type<GEMINI::MassCancelResponse, char>(), "MassCancelResponse", 531, &GEMINI::realmbases[118] } },
   { 532, { Type2Type<GEMINI::MassCancelRejectReason, char>(), "MassCancelRejectReason", 532, &GEMINI::realmbases[119] } },
   { 533, { Type2Type<GEMINI::TotalAffectedOrders>(), "TotalAffectedOrders", 533 } },
   { 534, { Type2Type<GEMINI::NoAffectedOrders>(), "NoAffectedOrders", 534 } },
   { 535, { Type2Type<GEMINI::AffectedOrderID>(), "AffectedOrderID", 535 } },
   { 536, { Type2Type<GEMINI::AffectedSecondaryOrderID>(), "AffectedSecondaryOrderID", 536 } },
   { 537, { Type2Type<GEMINI::QuoteType, int>(), "QuoteType", 537, &GEMINI::realmbases[120] } },
   { 538, { Type2Type<GEMINI::NestedPartyRole>(), "NestedPartyRole", 538 } },
   { 539, { Type2Type<GEMINI::NoNestedPartyIDs>(), "NoNestedPartyIDs", 539 } },
   { 540, { Type2Type<GEMINI::TotalAccruedInterestAmt>(), "TotalAccruedInterestAmt", 540 } },
   { 541, { Type2Type<GEMINI::MaturityDate>(), "MaturityDate", 541 } },
   { 542, { Type2Type<GEMINI::UnderlyingMaturityDate>(), "UnderlyingMaturityDate", 542 } },
   { 543, { Type2Type<GEMINI::InstrRegistry>(), "InstrRegistry", 543 } },
   { 544, { Type2Type<GEMINI::CashMargin, char>(), "CashMargin", 544, &GEMINI::realmbases[121] } },
   { 545, { Type2Type<GEMINI::NestedPartySubID>(), "NestedPartySubID", 545 } },
   { 546, { Type2Type<GEMINI::Scope, f8String>(), "Scope", 546, &GEMINI::realmbases[122] } },
   { 547, { Type2Type<GEMINI::MDImplicitDelete>(), "MDImplicitDelete", 547 } },
   { 548, { Type2Type<GEMINI::CrossID>(), "CrossID", 548 } },
   { 549, { Type2Type<GEMINI::CrossType, int>(), "CrossType", 549, &GEMINI::realmbases[123] } },
   { 550, { Type2Type<GEMINI::CrossPrioritization, int>(), "CrossPrioritization", 550, &GEMINI::realmbases[124] } },
   { 551, { Type2Type<GEMINI::OrigCrossID>(), "OrigCrossID", 551 } },
   { 552, { Type2Type<GEMINI::NoSides, int>(), "NoSides", 552, &GEMINI::realmbases[125] } },
   { 553, { Type2Type<GEMINI::Username>(), "Username", 553 } },
   { 554, { Type2Type<GEMINI::Password>(), "Password", 554 } },
   { 555, { Type2Type<GEMINI::NoLegs>(), "NoLegs", 555 } },
   { 556, { Type2Type<GEMINI::LegCurrency>(), "LegCurrency", 556 } },
   { 557, { Type2Type<GEMINI::TotNoSecurityTypes>(), "TotNoSecurityTypes", 557 } },
   { 558, { Type2Type<GEMINI::NoSecurityTypes>(), "NoSecurityTypes", 558 } },
   { 559, { Type2Type<GEMINI::SecurityListRequestType, int>(), "SecurityListRequestType", 559, &GEMINI::realmbases[126] } },
   { 560, { Type2Type<GEMINI::SecurityRequestResult, int>(), "SecurityRequestResult", 560, &GEMINI::realmbases[127] } },
   { 561, { Type2Type<GEMINI::RoundLot>(), "RoundLot", 561 } },
   { 562, { Type2Type<GEMINI::MinTradeVol>(), "MinTradeVol", 562 } },
   { 563, { Type2Type<GEMINI::MultiLegRptTypeReq, int>(), "MultiLegRptTypeReq", 563, &GEMINI::realmbases[128] } },
   { 564, { Type2Type<GEMINI::LegPositionEffect>(), "LegPositionEffect", 564 } },
   { 565, { Type2Type<GEMINI::LegCoveredOrUncovered>(), "LegCoveredOrUncovered", 565 } },
   { 566, { Type2Type<GEMINI::LegPrice>(), "LegPrice", 566 } },
   { 567, { Type2Type<GEMINI::TradSesStatusRejReason, int>(), "TradSesStatusRejReason", 567, &GEMINI::realmbases[129] } },
   { 568, { Type2Type<GEMINI::TradeRequestID>(), "TradeRequestID", 568 } },
   { 569, { Type2Type<GEMINI::TradeRequestType, int>(), "TradeRequestType", 569, &GEMINI::realmbases[130] } },
   { 570, { Type2Type<GEMINI::PreviouslyReported>(), "PreviouslyReported", 570 } },
   { 571, { Type2Type<GEMINI::TradeReportID>(), "TradeReportID", 571 } },
   { 572, { Type2Type<GEMINI::TradeReportRefID>(), "TradeReportRefID", 572 } },
   { 573, { Type2Type<GEMINI::MatchStatus, char>(), "MatchStatus", 573, &GEMINI::realmbases[131] } },
   { 574, { Type2Type<GEMINI::MatchType>(), "MatchType", 574 } },
   { 575, { Type2Type<GEMINI::OddLot>(), "OddLot", 575 } },
   { 576, { Type2Type<GEMINI::NoClearingInstructions>(), "NoClearingInstructions", 576 } },
   { 577, { Type2Type<GEMINI::ClearingInstruction, int>(), "ClearingInstruction", 577, &GEMINI::realmbases[132] } },
   { 578, { Type2Type<GEMINI::TradeInputSource>(), "TradeInputSource", 578 } },
   { 579, { Type2Type<GEMINI::TradeInputDevice>(), "TradeInputDevice", 579 } },
   { 580, { Type2Type<GEMINI::NoDates>(), "NoDates", 580 } },
   { 581, { Type2Type<GEMINI::AccountType, int>(), "AccountType", 581, &GEMINI::realmbases[133] } },
   { 582, { Type2Type<GEMINI::CustOrderCapacity, int>(), "CustOrderCapacity", 582, &GEMINI::realmbases[134] } },
   { 583, { Type2Type<GEMINI::ClOrdLinkID>(), "ClOrdLinkID", 583 } },
   { 584, { Type2Type<GEMINI::MassStatusReqID>(), "MassStatusReqID", 584 } },
   { 585, { Type2Type<GEMINI::MassStatusReqType, int>(), "MassStatusReqType", 585, &GEMINI::realmbases[135] } },
   { 586, { Type2Type<GEMINI::OrigOrdModTime>(), "OrigOrdModTime", 586 } },
   { 587, { Type2Type<GEMINI::LegSettlType>(), "LegSettlType", 587 } },
   { 588, { Type2Type<GEMINI::LegSettlDate>(), "LegSettlDate", 588 } },
   { 589, { Type2Type<GEMINI::DayBookingInst, char>(), "DayBookingInst", 589, &GEMINI::realmbases[136] } },
   { 590, { Type2Type<GEMINI::BookingUnit, char>(), "BookingUnit", 590, &GEMINI::realmbases[137] } },
   { 591, { Type2Type<GEMINI::PreallocMethod, char>(), "PreallocMethod", 591, &GEMINI::realmbases[138] } },
   { 592, { Type2Type<GEMINI::UnderlyingCountryOfIssue>(), "UnderlyingCountryOfIssue", 592 } },
   { 593, { Type2Type<GEMINI::UnderlyingStateOrProvinceOfIssue>(), "UnderlyingStateOrProvinceOfIssue", 593 } },
   { 594, { Type2Type<GEMINI::UnderlyingLocaleOfIssue>(), "UnderlyingLocaleOfIssue", 594 } },
   { 595, { Type2Type<GEMINI::UnderlyingInstrRegistry>(), "UnderlyingInstrRegistry", 595 } },
   { 596, { Type2Type<GEMINI::LegCountryOfIssue>(), "LegCountryOfIssue", 596 } },
   { 597, { Type2Type<GEMINI::LegStateOrProvinceOfIssue>(), "LegStateOrProvinceOfIssue", 597 } },
   { 598, { Type2Type<GEMINI::LegLocaleOfIssue>(), "LegLocaleOfIssue", 598 } },
   { 599, { Type2Type<GEMINI::LegInstrRegistry>(), "LegInstrRegistry", 599 } },
   { 600, { Type2Type<GEMINI::LegSymbol>(), "LegSymbol", 600 } },
   { 601, { Type2Type<GEMINI::LegSymbolSfx>(), "LegSymbolSfx", 601 } },
   { 602, { Type2Type<GEMINI::LegSecurityID>(), "LegSecurityID", 602 } },
   { 603, { Type2Type<GEMINI::LegSecurityIDSource>(), "LegSecurityIDSource", 603 } },
   { 604, { Type2Type<GEMINI::NoLegSecurityAltID>(), "NoLegSecurityAltID", 604 } },
   { 605, { Type2Type<GEMINI::LegSecurityAltID>(), "LegSecurityAltID", 605 } },
   { 606, { Type2Type<GEMINI::LegSecurityAltIDSource>(), "LegSecurityAltIDSource", 606 } },
   { 607, { Type2Type<GEMINI::LegProduct>(), "LegProduct", 607 } },
   { 608, { Type2Type<GEMINI::LegCFICode>(), "LegCFICode", 608 } },
   { 609, { Type2Type<GEMINI::LegSecurityType>(), "LegSecurityType", 609 } },
   { 610, { Type2Type<GEMINI::LegMaturityMonthYear>(), "LegMaturityMonthYear", 610 } },
   { 611, { Type2Type<GEMINI::LegMaturityDate>(), "LegMaturityDate", 611 } },
   { 612, { Type2Type<GEMINI::LegStrikePrice>(), "LegStrikePrice", 612 } },
   { 613, { Type2Type<GEMINI::LegOptAttribute>(), "LegOptAttribute", 613 } },
   { 614, { Type2Type<GEMINI::LegContractMultiplier>(), "LegContractMultiplier", 614 } },
   { 615, { Type2Type<GEMINI::LegCouponRate>(), "LegCouponRate", 615 } },
   { 616, { Type2Type<GEMINI::LegSecurityExchange>(), "LegSecurityExchange", 616 } },
   { 617, { Type2Type<GEMINI::LegIssuer>(), "LegIssuer", 617 } },
   { 618, { Type2Type<GEMINI::EncodedLegIssuerLen>(), "EncodedLegIssuerLen", 618 } },
   { 619, { Type2Type<GEMINI::EncodedLegIssuer>(), "EncodedLegIssuer", 619 } },
   { 620, { Type2Type<GEMINI::LegSecurityDesc>(), "LegSecurityDesc", 620 } },
   { 621, { Type2Type<GEMINI::EncodedLegSecurityDescLen>(), "EncodedLegSecurityDescLen", 621 } },
   { 622, { Type2Type<GEMINI::EncodedLegSecurityDesc>(), "EncodedLegSecurityDesc", 622 } },
   { 623, { Type2Type<GEMINI::LegRatioQty>(), "LegRatioQty", 623 } },
   { 624, { Type2Type<GEMINI::LegSide>(), "LegSide", 624 } },
   { 625, { Type2Type<GEMINI::TradingSessionSubID>(), "TradingSessionSubID", 625 } },
   { 626, { Type2Type<GEMINI::AllocType, int>(), "AllocType", 626, &GEMINI::realmbases[139] } },
   { 627, { Type2Type<GEMINI::NoHops>(), "NoHops", 627 } },
   { 628, { Type2Type<GEMINI::HopCompID>(), "HopCompID", 628 } },
   { 629, { Type2Type<GEMINI::HopSendingTime>(), "HopSendingTime", 629 } },
   { 630, { Type2Type<GEMINI::HopRefID>(), "HopRefID", 630 } },
   { 631, { Type2Type<GEMINI::MidPx>(), "MidPx", 631 } },
   { 632, { Type2Type<GEMINI::BidYield>(), "BidYield", 632 } },
   { 633, { Type2Type<GEMINI::MidYield>(), "MidYield", 633 } },
   { 634, { Type2Type<GEMINI::OfferYield>(), "OfferYield", 634 } },
   { 635, { Type2Type<GEMINI::ClearingFeeIndicator, f8String>(), "ClearingFeeIndicator", 635, &GEMINI::realmbases[140] } },
   { 636, { Type2Type<GEMINI::WorkingIndicator>(), "WorkingIndicator", 636 } },
   { 637, { Type2Type<GEMINI::LegLastPx>(), "LegLastPx", 637 } },
   { 638, { Type2Type<GEMINI::PriorityIndicator, int>(), "PriorityIndicator", 638, &GEMINI::realmbases[141] } },
   { 639, { Type2Type<GEMINI::PriceImprovement>(), "PriceImprovement", 639 } },
   { 640, { Type2Type<GEMINI::Price2>(), "Price2", 640 } },
   { 641, { Type2Type<GEMINI::LastForwardPoints2>(), "LastForwardPoints2", 641 } },
   { 642, { Type2Type<GEMINI::BidForwardPoints2>(), "BidForwardPoints2", 642 } },
   { 643, { Type2Type<GEMINI::OfferForwardPoints2>(), "OfferForwardPoints2", 643 } },
   { 644, { Type2Type<GEMINI::RFQReqID>(), "RFQReqID", 644 } },
   { 645, { Type2Type<GEMINI::MktBidPx>(), "MktBidPx", 645 } },
   { 646, { Type2Type<GEMINI::MktOfferPx>(), "MktOfferPx", 646 } },
   { 647, { Type2Type<GEMINI::MinBidSize>(), "MinBidSize", 647 } },
   { 648, { Type2Type<GEMINI::MinOfferSize>(), "MinOfferSize", 648 } },
   { 649, { Type2Type<GEMINI::QuoteStatusReqID>(), "QuoteStatusReqID", 649 } },
   { 650, { Type2Type<GEMINI::LegalConfirm>(), "LegalConfirm", 650 } },
   { 651, { Type2Type<GEMINI::UnderlyingLastPx>(), "UnderlyingLastPx", 651 } },
   { 652, { Type2Type<GEMINI::UnderlyingLastQty>(), "UnderlyingLastQty", 652 } },
   { 654, { Type2Type<GEMINI::LegRefID>(), "LegRefID", 654 } },
   { 655, { Type2Type<GEMINI::ContraLegRefID>(), "ContraLegRefID", 655 } },
   { 656, { Type2Type<GEMINI::SettlCurrBidFxRate>(), "SettlCurrBidFxRate", 656 } },
   { 657, { Type2Type<GEMINI::SettlCurrOfferFxRate>(), "SettlCurrOfferFxRate", 657 } },
   { 658, { Type2Type<GEMINI::QuoteRequestRejectReason, int>(), "QuoteRequestRejectReason", 658, &GEMINI::realmbases[142] } },
   { 659, { Type2Type<GEMINI::SideComplianceID>(), "SideComplianceID", 659 } },
   { 660, { Type2Type<GEMINI::AcctIDSource, int>(), "AcctIDSource", 660, &GEMINI::realmbases[143] } },
   { 661, { Type2Type<GEMINI::AllocAcctIDSource>(), "AllocAcctIDSource", 661 } },
   { 662, { Type2Type<GEMINI::BenchmarkPrice>(), "BenchmarkPrice", 662 } },
   { 663, { Type2Type<GEMINI::BenchmarkPriceType>(), "BenchmarkPriceType", 663 } },
   { 664, { Type2Type<GEMINI::ConfirmID>(), "ConfirmID", 664 } },
   { 665, { Type2Type<GEMINI::ConfirmStatus, int>(), "ConfirmStatus", 665, &GEMINI::realmbases[144] } },
   { 666, { Type2Type<GEMINI::ConfirmTransType, int>(), "ConfirmTransType", 666, &GEMINI::realmbases[145] } },
   { 667, { Type2Type<GEMINI::ContractSettlMonth>(), "ContractSettlMonth", 667 } },
   { 668, { Type2Type<GEMINI::DeliveryForm, int>(), "DeliveryForm", 668, &GEMINI::realmbases[146] } },
   { 669, { Type2Type<GEMINI::LastParPx>(), "LastParPx", 669 } },
   { 670, { Type2Type<GEMINI::NoLegAllocs>(), "NoLegAllocs", 670 } },
   { 671, { Type2Type<GEMINI::LegAllocAccount>(), "LegAllocAccount", 671 } },
   { 672, { Type2Type<GEMINI::LegIndividualAllocID>(), "LegIndividualAllocID", 672 } },
   { 673, { Type2Type<GEMINI::LegAllocQty>(), "LegAllocQty", 673 } },
   { 674, { Type2Type<GEMINI::LegAllocAcctIDSource>(), "LegAllocAcctIDSource", 674 } },
   { 675, { Type2Type<GEMINI::LegSettlCurrency>(), "LegSettlCurrency", 675 } },
   { 676, { Type2Type<GEMINI::LegBenchmarkCurveCurrency>(), "LegBenchmarkCurveCurrency", 676 } },
   { 677, { Type2Type<GEMINI::LegBenchmarkCurveName>(), "LegBenchmarkCurveName", 677 } },
   { 678, { Type2Type<GEMINI::LegBenchmarkCurvePoint>(), "LegBenchmarkCurvePoint", 678 } },
   { 679, { Type2Type<GEMINI::LegBenchmarkPrice>(), "LegBenchmarkPrice", 679 } },
   { 680, { Type2Type<GEMINI::LegBenchmarkPriceType>(), "LegBenchmarkPriceType", 680 } },
   { 681, { Type2Type<GEMINI::LegBidPx>(), "LegBidPx", 681 } },
   { 682, { Type2Type<GEMINI::LegIOIQty>(), "LegIOIQty", 682 } },
   { 683, { Type2Type<GEMINI::NoLegStipulations>(), "NoLegStipulations", 683 } },
   { 684, { Type2Type<GEMINI::LegOfferPx>(), "LegOfferPx", 684 } },
   { 686, { Type2Type<GEMINI::LegPriceType>(), "LegPriceType", 686 } },
   { 687, { Type2Type<GEMINI::LegQty>(), "LegQty", 687 } },
   { 688, { Type2Type<GEMINI::LegStipulationType>(), "LegStipulationType", 688 } },
   { 689, { Type2Type<GEMINI::LegStipulationValue>(), "LegStipulationValue", 689 } },
   { 690, { Type2Type<GEMINI::LegSwapType, int>(), "LegSwapType", 690, &GEMINI::realmbases[147] } },
   { 691, { Type2Type<GEMINI::Pool>(), "Pool", 691 } },
   { 692, { Type2Type<GEMINI::QuotePriceType, int>(), "QuotePriceType", 692, &GEMINI::realmbases[148] } },
   { 693, { Type2Type<GEMINI::QuoteRespID>(), "QuoteRespID", 693 } },
   { 694, { Type2Type<GEMINI::QuoteRespType, int>(), "QuoteRespType", 694, &GEMINI::realmbases[149] } },
   { 695, { Type2Type<GEMINI::QuoteQualifier>(), "QuoteQualifier", 695 } },
   { 696, { Type2Type<GEMINI::YieldRedemptionDate>(), "YieldRedemptionDate", 696 } },
   { 697, { Type2Type<GEMINI::YieldRedemptionPrice>(), "YieldRedemptionPrice", 697 } },
   { 698, { Type2Type<GEMINI::YieldRedemptionPriceType>(), "YieldRedemptionPriceType", 698 } },
   { 699, { Type2Type<GEMINI::BenchmarkSecurityID>(), "BenchmarkSecurityID", 699 } },
   { 700, { Type2Type<GEMINI::ReversalIndicator>(), "ReversalIndicator", 700 } },
   { 701, { Type2Type<GEMINI::YieldCalcDate>(), "YieldCalcDate", 701 } },
   { 702, { Type2Type<GEMINI::NoPositions>(), "NoPositions", 702 } },
   { 703, { Type2Type<GEMINI::PosType, f8String>(), "PosType", 703, &GEMINI::realmbases[150] } },
   { 704, { Type2Type<GEMINI::LongQty>(), "LongQty", 704 } },
   { 705, { Type2Type<GEMINI::ShortQty>(), "ShortQty", 705 } },
   { 706, { Type2Type<GEMINI::PosQtyStatus, int>(), "PosQtyStatus", 706, &GEMINI::realmbases[151] } },
   { 707, { Type2Type<GEMINI::PosAmtType, f8String>(), "PosAmtType", 707, &GEMINI::realmbases[152] } },
   { 708, { Type2Type<GEMINI::PosAmt>(), "PosAmt", 708 } },
   { 709, { Type2Type<GEMINI::PosTransType, int>(), "PosTransType", 709, &GEMINI::realmbases[153] } },
   { 710, { Type2Type<GEMINI::PosReqID>(), "PosReqID", 710 } },
   { 711, { Type2Type<GEMINI::NoUnderlyings>(), "NoUnderlyings", 711 } },
   { 712, { Type2Type<GEMINI::PosMaintAction, int>(), "PosMaintAction", 712, &GEMINI::realmbases[154] } },
   { 713, { Type2Type<GEMINI::OrigPosReqRefID>(), "OrigPosReqRefID", 713 } },
   { 714, { Type2Type<GEMINI::PosMaintRptRefID>(), "PosMaintRptRefID", 714 } },
   { 715, { Type2Type<GEMINI::ClearingBusinessDate>(), "ClearingBusinessDate", 715 } },
   { 716, { Type2Type<GEMINI::SettlSessID>(), "SettlSessID", 716 } },
   { 717, { Type2Type<GEMINI::SettlSessSubID>(), "SettlSessSubID", 717 } },
   { 718, { Type2Type<GEMINI::AdjustmentType, int>(), "AdjustmentType", 718, &GEMINI::realmbases[155] } },
   { 719, { Type2Type<GEMINI::ContraryInstructionIndicator>(), "ContraryInstructionIndicator", 719 } },
   { 720, { Type2Type<GEMINI::PriorSpreadIndicator>(), "PriorSpreadIndicator", 720 } },
   { 721, { Type2Type<GEMINI::PosMaintRptID>(), "PosMaintRptID", 721 } },
   { 722, { Type2Type<GEMINI::PosMaintStatus, int>(), "PosMaintStatus", 722, &GEMINI::realmbases[156] } },
   { 723, { Type2Type<GEMINI::PosMaintResult, int>(), "PosMaintResult", 723, &GEMINI::realmbases[157] } },
   { 724, { Type2Type<GEMINI::PosReqType, int>(), "PosReqType", 724, &GEMINI::realmbases[158] } },
   { 725, { Type2Type<GEMINI::ResponseTransportType, int>(), "ResponseTransportType", 725, &GEMINI::realmbases[159] } },
   { 726, { Type2Type<GEMINI::ResponseDestination>(), "ResponseDestination", 726 } },
   { 727, { Type2Type<GEMINI::TotalNumPosReports>(), "TotalNumPosReports", 727 } },
   { 728, { Type2Type<GEMINI::PosReqResult, int>(), "PosReqResult", 728, &GEMINI::realmbases[160] } },
   { 729, { Type2Type<GEMINI::PosReqStatus, int>(), "PosReqStatus", 729, &GEMINI::realmbases[161] } },
   { 730, { Type2Type<GEMINI::SettlPrice>(), "SettlPrice", 730 } },
   { 731, { Type2Type<GEMINI::SettlPriceType, int>(), "SettlPriceType", 731, &GEMINI::realmbases[162] } },
   { 732, { Type2Type<GEMINI::UnderlyingSettlPrice>(), "UnderlyingSettlPrice", 732 } },
   { 733, { Type2Type<GEMINI::UnderlyingSettlPriceType>(), "UnderlyingSettlPriceType", 733 } },
   { 734, { Type2Type<GEMINI::PriorSettlPrice>(), "PriorSettlPrice", 734 } },
   { 735, { Type2Type<GEMINI::NoQuoteQualifiers>(), "NoQuoteQualifiers", 735 } },
   { 736, { Type2Type<GEMINI::AllocSettlCurrency>(), "AllocSettlCurrency", 736 } },
   { 737, { Type2Type<GEMINI::AllocSettlCurrAmt>(), "AllocSettlCurrAmt", 737 } },
   { 738, { Type2Type<GEMINI::InterestAtMaturity>(), "InterestAtMaturity", 738 } },
   { 739, { Type2Type<GEMINI::LegDatedDate>(), "LegDatedDate", 739 } },
   { 740, { Type2Type<GEMINI::LegPool>(), "LegPool", 740 } },
   { 741, { Type2Type<GEMINI::AllocInterestAtMaturity>(), "AllocInterestAtMaturity", 741 } },
   { 742, { Type2Type<GEMINI::AllocAccruedInterestAmt>(), "AllocAccruedInterestAmt", 742 } },
   { 743, { Type2Type<GEMINI::DeliveryDate>(), "DeliveryDate", 743 } },
   { 744, { Type2Type<GEMINI::AssignmentMethod, char>(), "AssignmentMethod", 744, &GEMINI::realmbases[163] } },
   { 745, { Type2Type<GEMINI::AssignmentUnit>(), "AssignmentUnit", 745 } },
   { 746, { Type2Type<GEMINI::OpenInterest>(), "OpenInterest", 746 } },
   { 747, { Type2Type<GEMINI::ExerciseMethod, char>(), "ExerciseMethod", 747, &GEMINI::realmbases[164] } },
   { 748, { Type2Type<GEMINI::TotNumTradeReports>(), "TotNumTradeReports", 748 } },
   { 749, { Type2Type<GEMINI::TradeRequestResult, int>(), "TradeRequestResult", 749, &GEMINI::realmbases[165] } },
   { 750, { Type2Type<GEMINI::TradeRequestStatus, int>(), "TradeRequestStatus", 750, &GEMINI::realmbases[166] } },
   { 751, { Type2Type<GEMINI::TradeReportRejectReason, int>(), "TradeReportRejectReason", 751, &GEMINI::realmbases[167] } },
   { 752, { Type2Type<GEMINI::SideMultiLegReportingType, int>(), "SideMultiLegReportingType", 752, &GEMINI::realmbases[168] } },
   { 753, { Type2Type<GEMINI::NoPosAmt>(), "NoPosAmt", 753 } },
   { 754, { Type2Type<GEMINI::AutoAcceptIndicator>(), "AutoAcceptIndicator", 754 } },
   { 755, { Type2Type<GEMINI::AllocReportID>(), "AllocReportID", 755 } },
   { 756, { Type2Type<GEMINI::NoNested2PartyIDs>(), "NoNested2PartyIDs", 756 } },
   { 757, { Type2Type<GEMINI::Nested2PartyID>(), "Nested2PartyID", 757 } },
   { 758, { Type2Type<GEMINI::Nested2PartyIDSource>(), "Nested2PartyIDSource", 758 } },
   { 759, { Type2Type<GEMINI::Nested2PartyRole>(), "Nested2PartyRole", 759 } },
   { 760, { Type2Type<GEMINI::Nested2PartySubID>(), "Nested2PartySubID", 760 } },
   { 761, { Type2Type<GEMINI::BenchmarkSecurityIDSource, f8String>(), "BenchmarkSecurityIDSource", 761, &GEMINI::realmbases[169] } },
   { 762, { Type2Type<GEMINI::SecuritySubType>(), "SecuritySubType", 762 } },
   { 763, { Type2Type<GEMINI::UnderlyingSecuritySubType>(), "UnderlyingSecuritySubType", 763 } },
   { 764, { Type2Type<GEMINI::LegSecuritySubType>(), "LegSecuritySubType", 764 } },
   { 765, { Type2Type<GEMINI::AllowableOneSidednessPct>(), "AllowableOneSidednessPct", 765 } },
   { 766, { Type2Type<GEMINI::AllowableOneSidednessValue>(), "AllowableOneSidednessValue", 766 } },
   { 767, { Type2Type<GEMINI::AllowableOneSidednessCurr>(), "AllowableOneSidednessCurr", 767 } },
   { 768, { Type2Type<GEMINI::NoTrdRegTimestamps>(), "NoTrdRegTimestamps", 768 } },
   { 769, { Type2Type<GEMINI::TrdRegTimestamp>(), "TrdRegTimestamp", 769 } },
   { 770, { Type2Type<GEMINI::TrdRegTimestampType, int>(), "TrdRegTimestampType", 770, &GEMINI::realmbases[170] } },
   { 771, { Type2Type<GEMINI::TrdRegTimestampOrigin>(), "TrdRegTimestampOrigin", 771 } },
   { 772, { Type2Type<GEMINI::ConfirmRefID>(), "ConfirmRefID", 772 } },
   { 773, { Type2Type<GEMINI::ConfirmType, int>(), "ConfirmType", 773, &GEMINI::realmbases[171] } },
   { 774, { Type2Type<GEMINI::ConfirmRejReason, int>(), "ConfirmRejReason", 774, &GEMINI::realmbases[172] } },
   { 775, { Type2Type<GEMINI::BookingType, int>(), "BookingType", 775, &GEMINI::realmbases[173] } },
   { 776, { Type2Type<GEMINI::IndividualAllocRejCode>(), "IndividualAllocRejCode", 776 } },
   { 777, { Type2Type<GEMINI::SettlInstMsgID>(), "SettlInstMsgID", 777 } },
   { 778, { Type2Type<GEMINI::NoSettlInst>(), "NoSettlInst", 778 } },
   { 779, { Type2Type<GEMINI::LastUpdateTime>(), "LastUpdateTime", 779 } },
   { 780, { Type2Type<GEMINI::AllocSettlInstType, int>(), "AllocSettlInstType", 780, &GEMINI::realmbases[174] } },
   { 781, { Type2Type<GEMINI::NoSettlPartyIDs>(), "NoSettlPartyIDs", 781 } },
   { 782, { Type2Type<GEMINI::SettlPartyID>(), "SettlPartyID", 782 } },
   { 783, { Type2Type<GEMINI::SettlPartyIDSource>(), "SettlPartyIDSource", 783 } },
   { 784, { Type2Type<GEMINI::SettlPartyRole>(), "SettlPartyRole", 784 } },
   { 785, { Type2Type<GEMINI::SettlPartySubID>(), "SettlPartySubID", 785 } },
   { 786, { Type2Type<GEMINI::SettlPartySubIDType>(), "SettlPartySubIDType", 786 } },
   { 787, { Type2Type<GEMINI::DlvyInstType, char>(), "DlvyInstType", 787, &GEMINI::realmbases[175] } },
   { 788, { Type2Type<GEMINI::TerminationType, int>(), "TerminationType", 788, &GEMINI::realmbases[176] } },
   { 789, { Type2Type<GEMINI::NextExpectedMsgSeqNum>(), "NextExpectedMsgSeqNum", 789 } },
   { 790, { Type2Type<GEMINI::OrdStatusReqID>(), "OrdStatusReqID", 790 } },
   { 791, { Type2Type<GEMINI::SettlInstReqID>(), "SettlInstReqID", 791 } },
   { 792, { Type2Type<GEMINI::SettlInstReqRejCode, int>(), "SettlInstReqRejCode", 792, &GEMINI::realmbases[177] } },
   { 793, { Type2Type<GEMINI::SecondaryAllocID>(), "SecondaryAllocID", 793 } },
   { 794, { Type2Type<GEMINI::AllocReportType, int>(), "AllocReportType", 794, &GEMINI::realmbases[178] } },
   { 795, { Type2Type<GEMINI::AllocReportRefID>(), "AllocReportRefID", 795 } },
   { 796, { Type2Type<GEMINI::AllocCancReplaceReason, int>(), "AllocCancReplaceReason", 796, &GEMINI::realmbases[179] } },
   { 797, { Type2Type<GEMINI::CopyMsgIndicator>(), "CopyMsgIndicator", 797 } },
   { 798, { Type2Type<GEMINI::AllocAccountType, int>(), "AllocAccountType", 798, &GEMINI::realmbases[180] } },
   { 799, { Type2Type<GEMINI::OrderAvgPx>(), "OrderAvgPx", 799 } },
   { 800, { Type2Type<GEMINI::OrderBookingQty>(), "OrderBookingQty", 800 } },
   { 801, { Type2Type<GEMINI::NoSettlPartySubIDs>(), "NoSettlPartySubIDs", 801 } },
   { 802, { Type2Type<GEMINI::NoPartySubIDs>(), "NoPartySubIDs", 802 } },
   { 803, { Type2Type<GEMINI::PartySubIDType>(), "PartySubIDType", 803 } },
   { 804, { Type2Type<GEMINI::NoNestedPartySubIDs>(), "NoNestedPartySubIDs", 804 } },
   { 805, { Type2Type<GEMINI::NestedPartySubIDType>(), "NestedPartySubIDType", 805 } },
   { 806, { Type2Type<GEMINI::NoNested2PartySubIDs>(), "NoNested2PartySubIDs", 806 } },
   { 807, { Type2Type<GEMINI::Nested2PartySubIDType>(), "Nested2PartySubIDType", 807 } },
   { 808, { Type2Type<GEMINI::AllocIntermedReqType, int>(), "AllocIntermedReqType", 808, &GEMINI::realmbases[181] } },
   { 810, { Type2Type<GEMINI::UnderlyingPx>(), "UnderlyingPx", 810 } },
   { 811, { Type2Type<GEMINI::PriceDelta>(), "PriceDelta", 811 } },
   { 812, { Type2Type<GEMINI::ApplQueueMax>(), "ApplQueueMax", 812 } },
   { 813, { Type2Type<GEMINI::ApplQueueDepth>(), "ApplQueueDepth", 813 } },
   { 814, { Type2Type<GEMINI::ApplQueueResolution, int>(), "ApplQueueResolution", 814, &GEMINI::realmbases[182] } },
   { 815, { Type2Type<GEMINI::ApplQueueAction, int>(), "ApplQueueAction", 815, &GEMINI::realmbases[183] } },
   { 816, { Type2Type<GEMINI::NoAltMDSource>(), "NoAltMDSource", 816 } },
   { 817, { Type2Type<GEMINI::AltMDSourceID>(), "AltMDSourceID", 817 } },
   { 818, { Type2Type<GEMINI::SecondaryTradeReportID>(), "SecondaryTradeReportID", 818 } },
   { 819, { Type2Type<GEMINI::AvgPxIndicator, int>(), "AvgPxIndicator", 819, &GEMINI::realmbases[184] } },
   { 820, { Type2Type<GEMINI::TradeLinkID>(), "TradeLinkID", 820 } },
   { 821, { Type2Type<GEMINI::OrderInputDevice>(), "OrderInputDevice", 821 } },
   { 822, { Type2Type<GEMINI::UnderlyingTradingSessionID>(), "UnderlyingTradingSessionID", 822 } },
   { 823, { Type2Type<GEMINI::UnderlyingTradingSessionSubID>(), "UnderlyingTradingSessionSubID", 823 } },
   { 824, { Type2Type<GEMINI::TradeLegRefID>(), "TradeLegRefID", 824 } },
   { 825, { Type2Type<GEMINI::ExchangeRule>(), "ExchangeRule", 825 } },
   { 826, { Type2Type<GEMINI::TradeAllocIndicator, int>(), "TradeAllocIndicator", 826, &GEMINI::realmbases[185] } },
   { 827, { Type2Type<GEMINI::ExpirationCycle, int>(), "ExpirationCycle", 827, &GEMINI::realmbases[186] } },
   { 828, { Type2Type<GEMINI::TrdType, int>(), "TrdType", 828, &GEMINI::realmbases[187] } },
   { 829, { Type2Type<GEMINI::TrdSubType>(), "TrdSubType", 829 } },
   { 830, { Type2Type<GEMINI::TransferReason>(), "TransferReason", 830 } },
   { 832, { Type2Type<GEMINI::TotNumAssignmentReports>(), "TotNumAssignmentReports", 832 } },
   { 833, { Type2Type<GEMINI::AsgnRptID>(), "AsgnRptID", 833 } },
   { 834, { Type2Type<GEMINI::ThresholdAmount>(), "ThresholdAmount", 834 } },
   { 835, { Type2Type<GEMINI::PegMoveType, int>(), "PegMoveType", 835, &GEMINI::realmbases[188] } },
   { 836, { Type2Type<GEMINI::PegOffsetType, int>(), "PegOffsetType", 836, &GEMINI::realmbases[189] } },
   { 837, { Type2Type<GEMINI::PegLimitType, int>(), "PegLimitType", 837, &GEMINI::realmbases[190] } },
   { 838, { Type2Type<GEMINI::PegRoundDirection, int>(), "PegRoundDirection", 838, &GEMINI::realmbases[191] } },
   { 839, { Type2Type<GEMINI::PeggedPrice>(), "PeggedPrice", 839 } },
   { 840, { Type2Type<GEMINI::PegScope, int>(), "PegScope", 840, &GEMINI::realmbases[192] } },
   { 841, { Type2Type<GEMINI::DiscretionMoveType, int>(), "DiscretionMoveType", 841, &GEMINI::realmbases[193] } },
   { 842, { Type2Type<GEMINI::DiscretionOffsetType, int>(), "DiscretionOffsetType", 842, &GEMINI::realmbases[194] } },
   { 843, { Type2Type<GEMINI::DiscretionLimitType, int>(), "DiscretionLimitType", 843, &GEMINI::realmbases[195] } },
   { 844, { Type2Type<GEMINI::DiscretionRoundDirection, int>(), "DiscretionRoundDirection", 844, &GEMINI::realmbases[196] } },
   { 845, { Type2Type<GEMINI::DiscretionPrice>(), "DiscretionPrice", 845 } },
   { 846, { Type2Type<GEMINI::DiscretionScope, int>(), "DiscretionScope", 846, &GEMINI::realmbases[197] } },
   { 847, { Type2Type<GEMINI::TargetStrategy>(), "TargetStrategy", 847 } },
   { 848, { Type2Type<GEMINI::TargetStrategyParameters>(), "TargetStrategyParameters", 848 } },
   { 849, { Type2Type<GEMINI::ParticipationRate>(), "ParticipationRate", 849 } },
   { 850, { Type2Type<GEMINI::TargetStrategyPerformance>(), "TargetStrategyPerformance", 850 } },
   { 851, { Type2Type<GEMINI::LastLiquidityInd, int>(), "LastLiquidityInd", 851, &GEMINI::realmbases[198] } },
   { 852, { Type2Type<GEMINI::PublishTrdIndicator>(), "PublishTrdIndicator", 852 } },
   { 853, { Type2Type<GEMINI::ShortSaleReason, int>(), "ShortSaleReason", 853, &GEMINI::realmbases[199] } },
   { 854, { Type2Type<GEMINI::QtyType, int>(), "QtyType", 854, &GEMINI::realmbases[200] } },
   { 855, { Type2Type<GEMINI::SecondaryTrdType>(), "SecondaryTrdType", 855 } },
   { 856, { Type2Type<GEMINI::TradeReportType, int>(), "TradeReportType", 856, &GEMINI::realmbases[201] } },
   { 857, { Type2Type<GEMINI::AllocNoOrdersType, int>(), "AllocNoOrdersType", 857, &GEMINI::realmbases[202] } },
   { 858, { Type2Type<GEMINI::SharedCommission>(), "SharedCommission", 858 } },
   { 859, { Type2Type<GEMINI::ConfirmReqID>(), "ConfirmReqID", 859 } },
   { 860, { Type2Type<GEMINI::AvgParPx>(), "AvgParPx", 860 } },
   { 861, { Type2Type<GEMINI::ReportedPx>(), "ReportedPx", 861 } },
   { 862, { Type2Type<GEMINI::NoCapacities>(), "NoCapacities", 862 } },
   { 863, { Type2Type<GEMINI::OrderCapacityQty>(), "OrderCapacityQty", 863 } },
   { 864, { Type2Type<GEMINI::NoEvents>(), "NoEvents", 864 } },
   { 865, { Type2Type<GEMINI::EventType, int>(), "EventType", 865, &GEMINI::realmbases[203] } },
   { 866, { Type2Type<GEMINI::EventDate>(), "EventDate", 866 } },
   { 867, { Type2Type<GEMINI::EventPx>(), "EventPx", 867 } },
   { 868, { Type2Type<GEMINI::EventText>(), "EventText", 868 } },
   { 869, { Type2Type<GEMINI::PctAtRisk>(), "PctAtRisk", 869 } },
   { 870, { Type2Type<GEMINI::NoInstrAttrib>(), "NoInstrAttrib", 870 } },
   { 871, { Type2Type<GEMINI::InstrAttribType, int>(), "InstrAttribType", 871, &GEMINI::realmbases[204] } },
   { 872, { Type2Type<GEMINI::InstrAttribValue>(), "InstrAttribValue", 872 } },
   { 873, { Type2Type<GEMINI::DatedDate>(), "DatedDate", 873 } },
   { 874, { Type2Type<GEMINI::InterestAccrualDate>(), "InterestAccrualDate", 874 } },
   { 875, { Type2Type<GEMINI::CPProgram>(), "CPProgram", 875 } },
   { 876, { Type2Type<GEMINI::CPRegType>(), "CPRegType", 876 } },
   { 877, { Type2Type<GEMINI::UnderlyingCPProgram>(), "UnderlyingCPProgram", 877 } },
   { 878, { Type2Type<GEMINI::UnderlyingCPRegType>(), "UnderlyingCPRegType", 878 } },
   { 879, { Type2Type<GEMINI::UnderlyingQty>(), "UnderlyingQty", 879 } },
   { 880, { Type2Type<GEMINI::TrdMatchID>(), "TrdMatchID", 880 } },
   { 881, { Type2Type<GEMINI::SecondaryTradeReportRefID>(), "SecondaryTradeReportRefID", 881 } },
   { 882, { Type2Type<GEMINI::UnderlyingDirtyPrice>(), "UnderlyingDirtyPrice", 882 } },
   { 883, { Type2Type<GEMINI::UnderlyingEndPrice>(), "UnderlyingEndPrice", 883 } },
   { 884, { Type2Type<GEMINI::UnderlyingStartValue>(), "UnderlyingStartValue", 884 } },
   { 885, { Type2Type<GEMINI::UnderlyingCurrentValue>(), "UnderlyingCurrentValue", 885 } },
   { 886, { Type2Type<GEMINI::UnderlyingEndValue>(), "UnderlyingEndValue", 886 } },
   { 887, { Type2Type<GEMINI::NoUnderlyingStips>(), "NoUnderlyingStips", 887 } },
   { 888, { Type2Type<GEMINI::UnderlyingStipType>(), "UnderlyingStipType", 888 } },
   { 889, { Type2Type<GEMINI::UnderlyingStipValue>(), "UnderlyingStipValue", 889 } },
   { 890, { Type2Type<GEMINI::MaturityNetMoney>(), "MaturityNetMoney", 890 } },
   { 891, { Type2Type<GEMINI::MiscFeeBasis, int>(), "MiscFeeBasis", 891, &GEMINI::realmbases[205] } },
   { 892, { Type2Type<GEMINI::TotNoAllocs>(), "TotNoAllocs", 892 } },
   { 893, { Type2Type<GEMINI::LastFragment>(), "LastFragment", 893 } },
   { 894, { Type2Type<GEMINI::CollReqID>(), "CollReqID", 894 } },
   { 895, { Type2Type<GEMINI::CollAsgnReason, int>(), "CollAsgnReason", 895, &GEMINI::realmbases[206] } },
   { 896, { Type2Type<GEMINI::CollInquiryQualifier, int>(), "CollInquiryQualifier", 896, &GEMINI::realmbases[207] } },
   { 897, { Type2Type<GEMINI::NoTrades>(), "NoTrades", 897 } },
   { 898, { Type2Type<GEMINI::MarginRatio>(), "MarginRatio", 898 } },
   { 899, { Type2Type<GEMINI::MarginExcess>(), "MarginExcess", 899 } },
   { 900, { Type2Type<GEMINI::TotalNetValue>(), "TotalNetValue", 900 } },
   { 901, { Type2Type<GEMINI::CashOutstanding>(), "CashOutstanding", 901 } },
   { 902, { Type2Type<GEMINI::CollAsgnID>(), "CollAsgnID", 902 } },
   { 903, { Type2Type<GEMINI::CollAsgnTransType, int>(), "CollAsgnTransType", 903, &GEMINI::realmbases[208] } },
   { 904, { Type2Type<GEMINI::CollRespID>(), "CollRespID", 904 } },
   { 905, { Type2Type<GEMINI::CollAsgnRespType, int>(), "CollAsgnRespType", 905, &GEMINI::realmbases[209] } },
   { 906, { Type2Type<GEMINI::CollAsgnRejectReason, int>(), "CollAsgnRejectReason", 906, &GEMINI::realmbases[210] } },
   { 907, { Type2Type<GEMINI::CollAsgnRefID>(), "CollAsgnRefID", 907 } },
   { 908, { Type2Type<GEMINI::CollRptID>(), "CollRptID", 908 } },
   { 909, { Type2Type<GEMINI::CollInquiryID>(), "CollInquiryID", 909 } },
   { 910, { Type2Type<GEMINI::CollStatus, int>(), "CollStatus", 910, &GEMINI::realmbases[211] } },
   { 911, { Type2Type<GEMINI::TotNumReports>(), "TotNumReports", 911 } },
   { 912, { Type2Type<GEMINI::LastRptRequested>(), "LastRptRequested", 912 } },
   { 913, { Type2Type<GEMINI::AgreementDesc>(), "AgreementDesc", 913 } },
   { 914, { Type2Type<GEMINI::AgreementID>(), "AgreementID", 914 } },
   { 915, { Type2Type<GEMINI::AgreementDate>(), "AgreementDate", 915 } },
   { 916, { Type2Type<GEMINI::StartDate>(), "StartDate", 916 } },
   { 917, { Type2Type<GEMINI::EndDate>(), "EndDate", 917 } },
   { 918, { Type2Type<GEMINI::AgreementCurrency>(), "AgreementCurrency", 918 } },
   { 919, { Type2Type<GEMINI::DeliveryType, int>(), "DeliveryType", 919, &GEMINI::realmbases[212] } },
   { 920, { Type2Type<GEMINI::EndAccruedInterestAmt>(), "EndAccruedInterestAmt", 920 } },
   { 921, { Type2Type<GEMINI::StartCash>(), "StartCash", 921 } },
   { 922, { Type2Type<GEMINI::EndCash>(), "EndCash", 922 } },
   { 923, { Type2Type<GEMINI::UserRequestID>(), "UserRequestID", 923 } },
   { 924, { Type2Type<GEMINI::UserRequestType, int>(), "UserRequestType", 924, &GEMINI::realmbases[213] } },
   { 925, { Type2Type<GEMINI::NewPassword>(), "NewPassword", 925 } },
   { 926, { Type2Type<GEMINI::UserStatus, int>(), "UserStatus", 926, &GEMINI::realmbases[214] } },
   { 927, { Type2Type<GEMINI::UserStatusText>(), "UserStatusText", 927 } },
   { 928, { Type2Type<GEMINI::StatusValue, int>(), "StatusValue", 928, &GEMINI::realmbases[215] } },
   { 929, { Type2Type<GEMINI::StatusText>(), "StatusText", 929 } },
   { 930, { Type2Type<GEMINI::RefCompID>(), "RefCompID", 930 } },
   { 931, { Type2Type<GEMINI::RefSubID>(), "RefSubID", 931 } },
   { 932, { Type2Type<GEMINI::NetworkResponseID>(), "NetworkResponseID", 932 } },
   { 933, { Type2Type<GEMINI::NetworkRequestID>(), "NetworkRequestID", 933 } },
   { 934, { Type2Type<GEMINI::LastNetworkResponseID>(), "LastNetworkResponseID", 934 } },
   { 935, { Type2Type<GEMINI::NetworkRequestType, int>(), "NetworkRequestType", 935, &GEMINI::realmbases[216] } },
   { 936, { Type2Type<GEMINI::NoCompIDs>(), "NoCompIDs", 936 } },
   { 937, { Type2Type<GEMINI::NetworkStatusResponseType, int>(), "NetworkStatusResponseType", 937, &GEMINI::realmbases[217] } },
   { 938, { Type2Type<GEMINI::NoCollInquiryQualifier>(), "NoCollInquiryQualifier", 938 } },
   { 939, { Type2Type<GEMINI::TrdRptStatus, int>(), "TrdRptStatus", 939, &GEMINI::realmbases[218] } },
   { 940, { Type2Type<GEMINI::AffirmStatus, int>(), "AffirmStatus", 940, &GEMINI::realmbases[219] } },
   { 941, { Type2Type<GEMINI::UnderlyingStrikeCurrency>(), "UnderlyingStrikeCurrency", 941 } },
   { 942, { Type2Type<GEMINI::LegStrikeCurrency>(), "LegStrikeCurrency", 942 } },
   { 943, { Type2Type<GEMINI::TimeBracket>(), "TimeBracket", 943 } },
   { 944, { Type2Type<GEMINI::CollAction, int>(), "CollAction", 944, &GEMINI::realmbases[220] } },
   { 945, { Type2Type<GEMINI::CollInquiryStatus, int>(), "CollInquiryStatus", 945, &GEMINI::realmbases[221] } },
   { 946, { Type2Type<GEMINI::CollInquiryResult, int>(), "CollInquiryResult", 946, &GEMINI::realmbases[222] } },
   { 947, { Type2Type<GEMINI::StrikeCurrency>(), "StrikeCurrency", 947 } },
   { 948, { Type2Type<GEMINI::NoNested3PartyIDs>(), "NoNested3PartyIDs", 948 } },
   { 949, { Type2Type<GEMINI::Nested3PartyID>(), "Nested3PartyID", 949 } },
   { 950, { Type2Type<GEMINI::Nested3PartyIDSource>(), "Nested3PartyIDSource", 950 } },
   { 951, { Type2Type<GEMINI::Nested3PartyRole>(), "Nested3PartyRole", 951 } },
   { 952, { Type2Type<GEMINI::NoNested3PartySubIDs>(), "NoNested3PartySubIDs", 952 } },
   { 953, { Type2Type<GEMINI::Nested3PartySubID>(), "Nested3PartySubID", 953 } },
   { 954, { Type2Type<GEMINI::Nested3PartySubIDType>(), "Nested3PartySubIDType", 954 } },
   { 955, { Type2Type<GEMINI::LegContractSettlMonth>(), "LegContractSettlMonth", 955 } },
   { 956, { Type2Type<GEMINI::LegInterestAccrualDate>(), "LegInterestAccrualDate", 956 } },
   { 9001, { Type2Type<GEMINI::CancelOnDisconnect>(), "CancelOnDisconnect", 9001 } },
   { 9002, { Type2Type<GEMINI::MDEntryMakerSide, char>(), "MDEntryMakerSide", 9002, &GEMINI::realmbases[223] } },
   { 9003, { Type2Type<GEMINI::EnableMDEntryMakerSide>(), "EnableMDEntryMakerSide", 9003 } }
}; // 915
} // namespace GEMINI

} // namespace FIX8
